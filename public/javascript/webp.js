/* eslint-disable */

var Module;
if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
var WASMBASE64 = "";
var MEMBASE64 = "";
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

function _base64ToArrayBuffer(base64) {
    var binary_string =  window.atob(base64);
    var len = binary_string.length;
    var bytes = new Uint8Array( len );
    for (var i = 0; i < len; i++)        {
        bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes.buffer;
}

if (Module["ENVIRONMENT"]) {
  if (Module["ENVIRONMENT"] === "WEB") {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module["ENVIRONMENT"] === "WORKER") {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module["ENVIRONMENT"] === "NODE") {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module["ENVIRONMENT"] === "SHELL") {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error(
      "The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL."
    );
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === "object";
  ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
  ENVIRONMENT_IS_NODE =
    typeof process === "object" &&
    typeof require === "function" &&
    !ENVIRONMENT_IS_WEB &&
    !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}
if (ENVIRONMENT_IS_NODE) {
  if (!Module["print"]) Module["print"] = console.log;
  if (!Module["printErr"]) Module["printErr"] = console.warn;
  var nodeFS;
  var nodePath;
  Module["read"] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require("fs");
    if (!nodePath) nodePath = require("path");
    filename = nodePath["normalize"](filename);
    var ret = nodeFS["readFileSync"](filename);
    return binary ? ret : ret.toString();
  };
  Module["readBinary"] = function readBinary(filename) {
    var ret = Module["read"](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };
  Module["load"] = function load(f) {
    globalEval(read(f));
  };
  if (!Module["thisProgram"]) {
    if (process["argv"].length > 1) {
      Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
    } else {
      Module["thisProgram"] = "unknown-program";
    }
  }
  Module["arguments"] = process["argv"].slice(2);
  if (typeof module !== "undefined") {
    module["exports"] = Module;
  }
  process["on"]("uncaughtException", function(ex) {
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  Module["inspect"] = function() {
    return "[Emscripten Module object]";
  };
} else if (ENVIRONMENT_IS_SHELL) {
  if (!Module["print"]) Module["print"] = print;
  if (typeof printErr != "undefined") Module["printErr"] = printErr;
  if (typeof read != "undefined") {
    Module["read"] = read;
  } else {
    Module["read"] = function read() {
      throw "no read() available";
    };
  }
  Module["readBinary"] = function readBinary(f) {
    if (typeof readbuffer === "function") {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, "binary");
    assert(typeof data === "object");
    return data;
  };
  if (typeof scriptArgs != "undefined") {
    Module["arguments"] = scriptArgs;
  } else if (typeof arguments != "undefined") {
    Module["arguments"] = arguments;
  }
  if (typeof quit === "function") {
    Module["quit"] = function(status, toThrow) {
      quit(status);
    };
  }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module["read"] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (ENVIRONMENT_IS_WORKER) {
    Module["readBinary"] = function read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url, false);
      xhr.responseType = "arraybuffer";
      xhr.send(null);
      return xhr.response;
    };
  }
  Module["readAsync"] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.responseType = "arraybuffer";
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };
  if (typeof arguments != "undefined") {
    Module["arguments"] = arguments;
  }
  if (typeof console !== "undefined") {
    if (!Module["print"])
      Module["print"] = function print(x) {
        console.log(x);
      };
    if (!Module["printErr"])
      Module["printErr"] = function printErr(x) {
        console.warn(x);
      };
  } else {
    var TRY_USE_DUMP = false;
    if (!Module["print"])
      Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined"
        ? function(x) {
            dump(x);
          }
        : function(x) {};
  }
  if (ENVIRONMENT_IS_WORKER) {
    Module["load"] = importScripts;
  }
  if (typeof Module["setWindowTitle"] === "undefined") {
    Module["setWindowTitle"] = function(title) {
      document.title = title;
    };
  }
} else {
  throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module["load"] && Module["read"]) {
  Module["load"] = function load(f) {
    globalEval(Module["read"](f));
  };
}
if (!Module["print"]) {
  Module["print"] = function() {};
}
if (!Module["printErr"]) {
  Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
  Module["arguments"] = [];
}
if (!Module["thisProgram"]) {
  Module["thisProgram"] = "./this.program";
}
if (!Module["quit"]) {
  Module["quit"] = function(status, toThrow) {
    throw toThrow;
  };
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
moduleOverrides = undefined;
var Runtime = {
  setTempRet0: function(value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function() {
    return tempRet0;
  },
  stackSave: function() {
    return STACKTOP;
  },
  stackRestore: function(stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function(type) {
    switch (type) {
      case "i1":
      case "i8":
        return 1;
      case "i16":
        return 2;
      case "i32":
        return 4;
      case "i64":
        return 8;
      case "float":
        return 4;
      case "double":
        return 8;
      default: {
        if (type[type.length - 1] === "*") {
          return Runtime.QUANTUM_SIZE;
        } else if (type[0] === "i") {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits / 8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function(type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function(ptr, type) {
    if (type === "double" || type === "i64") {
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function(type, size, vararg) {
    if (!vararg && (type == "i64" || type == "double")) return 8;
    if (!type) return Math.min(size, 8);
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function(sig, ptr, args) {
    if (args && args.length) {
      return Module["dynCall_" + sig].apply(null, [ptr].concat(args));
    } else {
      return Module["dynCall_" + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function(func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2 * (1 + i);
      }
    }
    throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
  },
  removeFunction: function(index) {
    Runtime.functionPointers[(index - 2) / 2] = null;
  },
  warnOnce: function(text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function(func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function(name) {
    throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
  },
  stackAlloc: function(size) {
    var ret = STACKTOP;
    STACKTOP = (STACKTOP + size) | 0;
    STACKTOP = (STACKTOP + 15) & -16;
    return ret;
  },
  staticAlloc: function(size) {
    var ret = STATICTOP;
    STATICTOP = (STATICTOP + size) | 0;
    STATICTOP = (STATICTOP + 15) & -16;
    return ret;
  },
  dynamicAlloc: function(size) {
    var ret = HEAP32[DYNAMICTOP_PTR >> 2];
    var end = ((ret + size + 15) | 0) & -16;
    HEAP32[DYNAMICTOP_PTR >> 2] = end;
    if (end >= TOTAL_MEMORY) {
      var success = enlargeMemory();
      if (!success) {
        HEAP32[DYNAMICTOP_PTR >> 2] = ret;
        return 0;
      }
    }
    return ret;
  },
  alignMemory: function(size, quantum) {
    var ret = (size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16));
    return ret;
  },
  makeBigInt: function(low, high, unsigned) {
    var ret = unsigned
      ? +(low >>> 0) + +(high >>> 0) * +4294967296
      : +(low >>> 0) + +(high | 0) * +4294967296;
    return ret;
  },
  GLOBAL_BASE: 1024,
  QUANTUM_SIZE: 4,
  __dummy__: 0,
};
Module["Runtime"] = Runtime;
var ABORT = 0;
var EXITSTATUS = 0;
function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text);
  }
}
function getCFunc(ident) {
  var func = Module["_" + ident];
  if (!func) {
    try {
      func = eval("_" + ident);
    } catch (e) {}
  }
  assert(
    func,
    "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)"
  );
  return func;
}
var cwrap, ccall;
(function() {
  var JSfuncs = {
    stackSave: function() {
      Runtime.stackSave();
    },
    stackRestore: function() {
      Runtime.stackRestore();
    },
    arrayToC: function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    stringToC: function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) {
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
  };
  var toC = { string: JSfuncs["stringToC"], array: JSfuncs["arrayToC"] };
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === "string") ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  };
  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return { arguments: parsed[0], body: parsed[1], returnValue: parsed[2] };
  }
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    var numericArgs = argTypes.every(function(type) {
      return type === "number";
    });
    var numericRet = returnType !== "string";
    if (numericRet && numericArgs) {
      return cfunc;
    }
    var argNames = argTypes.map(function(x, i) {
      return "$" + i;
    });
    var funcstr = "(function(" + argNames.join(",") + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      ensureJSsource();
      funcstr += "var stack = " + JSsource["stackSave"].body + ";";
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === "number") continue;
        var convertCode = JSsource[type + "ToC"];
        funcstr += "var " + convertCode.arguments + " = " + arg + ";";
        funcstr += convertCode.body + ";";
        funcstr += arg + "=(" + convertCode.returnValue + ");";
      }
    }
    var cfuncname = parseJSFunc(function() {
      return cfunc;
    }).returnValue;
    funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
    if (!numericRet) {
      var strgfy = parseJSFunc(function() {
        return Pointer_stringify;
      }).returnValue;
      funcstr += "ret = " + strgfy + "(ret);";
    }
    if (!numericArgs) {
      ensureJSsource();
      funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
    }
    funcstr += "return ret})";
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
function setValue(ptr, value, type, noSafe) {
  type = type || "i8";
  if (type.charAt(type.length - 1) === "*") type = "i32";
  switch (type) {
    case "i1":
      HEAP8[ptr >> 0] = value;
      break;
    case "i8":
      HEAP8[ptr >> 0] = value;
      break;
    case "i16":
      HEAP16[ptr >> 1] = value;
      break;
    case "i32":
      HEAP32[ptr >> 2] = value;
      break;
    case "i64":
      (tempI64 = [
        value >>> 0,
        ((tempDouble = value), +Math_abs(tempDouble) >= +1
          ? tempDouble > +0
              ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0
              : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0
          : 0),
      ]), (HEAP32[ptr >> 2] = tempI64[0]), (HEAP32[(ptr + 4) >> 2] = tempI64[1]);
      break;
    case "float":
      HEAPF32[ptr >> 2] = value;
      break;
    case "double":
      HEAPF64[ptr >> 3] = value;
      break;
    default:
      abort("invalid type for setValue: " + type);
  }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
  type = type || "i8";
  if (type.charAt(type.length - 1) === "*") type = "i32";
  switch (type) {
    case "i1":
      return HEAP8[ptr >> 0];
    case "i8":
      return HEAP8[ptr >> 0];
    case "i16":
      return HEAP16[ptr >> 1];
    case "i32":
      return HEAP32[ptr >> 2];
    case "i64":
      return HEAP32[ptr >> 2];
    case "float":
      return HEAPF32[ptr >> 2];
    case "double":
      return HEAPF64[ptr >> 3];
    default:
      abort("invalid type for setValue: " + type);
  }
  return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === "number") {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === "string" ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [
      typeof _malloc === "function" ? _malloc : Runtime.staticAlloc,
      Runtime.stackAlloc,
      Runtime.staticAlloc,
      Runtime.dynamicAlloc,
    ][allocator === undefined ? ALLOC_STATIC : allocator](
      Math.max(size, singleType ? 1 : types.length)
    );
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[ptr >> 2] = 0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[ptr++ >> 0] = 0;
    }
    return ret;
  }
  if (singleType === "i8") {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === "function") {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == "i64") type = "i32";
    setValue(ret + i, curr, type);
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module["allocate"] = allocate;
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return "";
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(ptr + i) >> 0];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = "";
  if (hasUtf < 128) {
    var MAX_CHUNK = 1024;
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(
        String,
        HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK))
      );
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module["UTF8ToString"](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;
function AsciiToString(ptr) {
  var str = "";
  while (1) {
    var ch = HEAP8[ptr++ >> 0];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;
function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;
var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  while (u8Array[endPtr])
    ++endPtr;
  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;
    var str = "";
    while (1) {
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 128)) {
        str += String.fromCharCode(u0);
        continue;
      }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 224) == 192) {
        str += String.fromCharCode(((u0 & 31) << 6) | u1);
        continue;
      }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 240) == 224) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 248) == 240) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 252) == 248) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 65536) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 65536;
        str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;
function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module["UTF8ToString"] = UTF8ToString;
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) return 0;
  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1;
  for (var i = 0; i < str.length; ++i) {
    var u = str.charCodeAt(i);
    if (u >= 55296 && u <= 57343) u = (65536 + ((u & 1023) << 10)) | (str.charCodeAt(++i) & 1023);
    if (u <= 127) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 2047) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 192 | (u >> 6);
      outU8Array[outIdx++] = 128 | (u & 63);
    } else if (u <= 65535) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 224 | (u >> 12);
      outU8Array[outIdx++] = 128 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 128 | (u & 63);
    } else if (u <= 2097151) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 240 | (u >> 18);
      outU8Array[outIdx++] = 128 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 128 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 128 | (u & 63);
    } else if (u <= 67108863) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 248 | (u >> 24);
      outU8Array[outIdx++] = 128 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 128 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 128 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 128 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 252 | (u >> 30);
      outU8Array[outIdx++] = 128 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 128 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 128 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 128 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 128 | (u & 63);
    }
  }
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;
function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    var u = str.charCodeAt(i);
    if (u >= 55296 && u <= 57343) u = (65536 + ((u & 1023) << 10)) | (str.charCodeAt(++i) & 1023);
    if (u <= 127) {
      ++len;
    } else if (u <= 2047) {
      len += 2;
    } else if (u <= 65535) {
      len += 3;
    } else if (u <= 2097151) {
      len += 4;
    } else if (u <= 67108863) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;
var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;
function demangle(func) {
  var __cxa_demangle_func = Module["___cxa_demangle"] || Module["__cxa_demangle"];
  if (__cxa_demangle_func) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s) + 1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, "i32") === 0 && ret) {
        return Pointer_stringify(ret);
      }
    } catch (e) {
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    return func;
  }
  Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
  return func;
}
function demangleAll(text) {
  var regex = /__Z[\w\d_]+/g;
  return text.replace(regex, function(x) {
    var y = demangle(x);
    return x === y ? x : x + " [" + y + "]";
  });
}
function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    try {
      throw new Error(0);
    } catch (e) {
      err = e;
    }
    if (!err.stack) {
      return "(no stack trace available)";
    }
  }
  return err.stack.toString();
}
function stackTrace() {
  var js = jsStackTrace();
  if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - x % multiple;
  }
  return x;
}
var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
function updateGlobalBuffer(buf) {
  Module["buffer"] = buffer = buf;
}
function updateGlobalBufferViews() {
  Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
  Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
  Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
  Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
  Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
  Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
  Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
  Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
}
var STATIC_BASE, STATICTOP, staticSealed;
var STACK_BASE, STACKTOP, STACK_MAX;
var DYNAMIC_BASE, DYNAMICTOP_PTR;
STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
staticSealed = false;
function abortOnCannotGrowMemory() {
  abort(
    "Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " +
      TOTAL_MEMORY +
      ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 "
  );
}
function enlargeMemory() {
  abortOnCannotGrowMemory();
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 50331648;
if (TOTAL_MEMORY < TOTAL_STACK)
  Module.printErr(
    "TOTAL_MEMORY should be larger than TOTAL_STACK, was " +
      TOTAL_MEMORY +
      "! (TOTAL_STACK=" +
      TOTAL_STACK +
      ")"
  );
if (Module["buffer"]) {
  buffer = Module["buffer"];
} else {
  if (typeof WebAssembly === "object" && typeof WebAssembly.Memory === "function") {
    Module["wasmMemory"] = new WebAssembly.Memory({
      initial: TOTAL_MEMORY / WASM_PAGE_SIZE,
      maximum: TOTAL_MEMORY / WASM_PAGE_SIZE,
    });
    buffer = Module["wasmMemory"].buffer;
  } else {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();
function getTotalMemory() {
  return TOTAL_MEMORY;
}
HEAP32[0] = 1668509029;
HEAP16[1] = 25459;
if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99)
  throw "Runtime error: expected the system to be little-endian!";
Module["HEAP"] = HEAP;
Module["buffer"] = buffer;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == "function") {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === "number") {
      if (callback.arg === undefined) {
        Module["dynCall_v"](func);
      } else {
        Module["dynCall_vi"](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
  if (Module["preRun"]) {
    if (typeof Module["preRun"] == "function") Module["preRun"] = [Module["preRun"]];
    while (Module["preRun"].length) {
      addOnPreRun(Module["preRun"].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}
function postRun() {
  if (Module["postRun"]) {
    if (typeof Module["postRun"] == "function") Module["postRun"] = [Module["postRun"]];
    while (Module["postRun"].length) {
      addOnPostRun(Module["postRun"].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce(
    "writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!"
  );
  var lastChar, end;
  if (dontAddNull) {
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar;
}
Module["writeStringToMemory"] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[buffer++ >> 0] = str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5)
  Math["imul"] = function imul(a, b) {
    var ah = a >>> 16;
    var al = a & 65535;
    var bh = b >>> 16;
    var bl = b & 65535;
    return (al * bl + ((ah * bl + al * bh) << 16)) | 0;
  };
Math.imul = Math["imul"];
if (!Math["fround"]) {
  var froundBuffer = new Float32Array(1);
  Math["fround"] = function(x) {
    froundBuffer[0] = x;
    return froundBuffer[0];
  };
}
Math.fround = Math["fround"];
if (!Math["clz32"])
  Math["clz32"] = function(x) {
    x = x >>> 0;
    for (var i = 0; i < 32; i++) {
      if (x & (1 << (31 - i))) return i;
    }
    return 32;
  };
Math.clz32 = Math["clz32"];
if (!Math["trunc"])
  Math["trunc"] = function(x) {
    return x < 0 ? Math.ceil(x) : Math.floor(x);
  };
Math.trunc = Math["trunc"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
  return id;
}
function addRunDependency(id) {
  runDependencies++;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback();
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
function integrateWasmJS(Module) {
  var method = Module["wasmJSMethod"] || "native-wasm,asmjs";
  Module["wasmJSMethod"] = method;
  var wasmTextFile = Module["wasmTextFile"] || "/javascript/mr.wast";
  var wasmBinaryFile = Module["wasmBinaryFile"] || "/javascript/mr.wasm";
  var asmjsCodeFile = Module["asmjsCodeFile"] || "/javascript/mr.asm.js";
  var wasmPageSize = 64 * 1024;
  var asm2wasmImports = {
    "f64-rem": function(x, y) {
      return x % y;
    },
    "f64-to-int": function(x) {
      return x | 0;
    },
    "i32s-div": function(x, y) {
      return ((x | 0) / (y | 0)) | 0;
    },
    "i32u-div": function(x, y) {
      return ((x >>> 0) / (y >>> 0)) >>> 0;
    },
    "i32s-rem": function(x, y) {
      return ((x | 0) % (y | 0)) | 0;
    },
    "i32u-rem": function(x, y) {
      return ((x >>> 0) % (y >>> 0)) >>> 0;
    },
    debugger: function() {
      debugger;
    },
  };
  var info = { global: null, env: null, asm2wasm: asm2wasmImports, parent: Module };
  var exports = null;
  function lookupImport(mod, base) {
    var lookup = info;
    if (mod.indexOf(".") < 0) {
      lookup = (lookup || {})[mod];
    } else {
      var parts = mod.split(".");
      lookup = (lookup || {})[parts[0]];
      lookup = (lookup || {})[parts[1]];
    }
    if (base) {
      lookup = (lookup || {})[base];
    }
    if (lookup === undefined) {
      abort("bad lookupImport to (" + mod + ")." + base);
    }
    return lookup;
  }
  function mergeMemory(newBuffer) {
    var oldBuffer = Module["buffer"];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      Module["printErr"](
        "the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here"
      );
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);
    if (!memoryInitializer) {
      oldView.set(
        newView.subarray(Module["STATIC_BASE"], Module["STATIC_BASE"] + Module["STATIC_BUMP"]),
        Module["STATIC_BASE"]
      );
    }
    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }
  var WasmTypes = { none: 0, i32: 1, i64: 2, f32: 3, f64: 4 };
  function fixImports(imports) {
    if (!0) return imports;
    var ret = {};
    for (var i in imports) {
      var fixed = i;
      if (fixed[0] == "_") fixed = fixed.substr(1);
      ret[fixed] = imports[i];
    }
    return ret;
  }
  function getBinary() {
    return _base64ToArrayBuffer(WASMBASE64);
    // var binary;
    // if (Module["wasmBinary"]) {
    //   binary = Module["wasmBinary"];
    //   binary = new Uint8Array(binary);
    // } else if (Module["readBinary"]) {
    //   binary = Module["readBinary"](wasmBinaryFile);
    // } else {
    //   throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";
    // }
    // return binary;
  }
  function doJustAsm(global, env, providedBuffer) {
    if (typeof Module["asm"] !== "function" || Module["asm"] === methodHandler) {
      if (!Module["asmPreload"]) {
        eval(Module["read"](asmjsCodeFile));
      } else {
        Module["asm"] = Module["asmPreload"];
      }
    }
    if (typeof Module["asm"] !== "function") {
      Module["printErr"]("asm evalling did not set the module properly");
      return false;
    }
    return Module["asm"](global, env, providedBuffer);
  }
  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== "object") {
      Module["printErr"]("no native wasm support detected");
      return false;
    }
    if (!(Module["wasmMemory"] instanceof WebAssembly.Memory)) {
      Module["printErr"]("no native wasm Memory in use");
      return false;
    }
    env["memory"] = Module["wasmMemory"];
    info["global"] = { NaN: NaN, Infinity: Infinity };
    info["global.Math"] = global.Math;
    info["env"] = env;
    function receiveInstance(instance) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module["asm"] = exports;
      Module["usingWasm"] = true;
      removeRunDependency("wasm-instantiate");
    }
    addRunDependency("wasm-instantiate");
    if (Module["instantiateWasm"]) {
      try {
        return Module["instantiateWasm"](info, receiveInstance);
      } catch (e) {
        Module["printErr"]("Module.instantiateWasm callback failed with error: " + e);
        return false;
      }
    }
    var instance;
    try {
      instance = new WebAssembly.Instance(new WebAssembly.Module(getBinary()), info);
    } catch (e) {
      Module["printErr"]("failed to compile wasm module: " + e);
      if (e.toString().indexOf("imported Memory with incompatible size") >= 0) {
        Module["printErr"](
          "Memory size incompatibility issues may be due to changing TOTAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set TOTAL_MEMORY at runtime to something smaller than it was at compile time)."
        );
      }
      return false;
    }
    receiveInstance(instance);
    return exports;
  }
  function doWasmPolyfill(global, env, providedBuffer, method) {
    if (typeof WasmJS !== "function") {
      Module["printErr"]("WasmJS not detected - polyfill not bundled?");
      return false;
    }
    var wasmJS = WasmJS({});
    wasmJS["outside"] = Module;
    wasmJS["info"] = info;
    wasmJS["lookupImport"] = lookupImport;
    assert(providedBuffer === Module["buffer"]);
    info.global = global;
    info.env = env;
    assert(providedBuffer === Module["buffer"]);
    env["memory"] = providedBuffer;
    assert(env["memory"] instanceof ArrayBuffer);
    wasmJS["providedTotalMemory"] = Module["buffer"].byteLength;
    var code;
    if (method === "interpret-binary") {
      code = getBinary();
    } else {
      code = Module["read"](method == "interpret-asm2wasm" ? asmjsCodeFile : wasmTextFile);
    }
    var temp;
    if (method == "interpret-asm2wasm") {
      temp = wasmJS["_malloc"](code.length + 1);
      wasmJS["writeAsciiToMemory"](code, temp);
      wasmJS["_load_asm2wasm"](temp);
    } else if (method === "interpret-s-expr") {
      temp = wasmJS["_malloc"](code.length + 1);
      wasmJS["writeAsciiToMemory"](code, temp);
      wasmJS["_load_s_expr2wasm"](temp);
    } else if (method === "interpret-binary") {
      temp = wasmJS["_malloc"](code.length);
      wasmJS["HEAPU8"].set(code, temp);
      wasmJS["_load_binary2wasm"](temp, code.length);
    } else {
      throw "what? " + method;
    }
    wasmJS["_free"](temp);
    wasmJS["_instantiate"](temp);
    if (Module["newBuffer"]) {
      mergeMemory(Module["newBuffer"]);
      Module["newBuffer"] = null;
    }
    exports = wasmJS["asmExports"];
    return exports;
  }
  Module["asmPreload"] = Module["asm"];
  Module["reallocBuffer"] = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;
    size = alignUp(size, PAGE_MULTIPLE);
    var old = Module["buffer"];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      try {
        var result = Module["wasmMemory"].grow((size - oldSize) / wasmPageSize);
        if (result !== (-1 | 0)) {
          return (Module["buffer"] = Module["wasmMemory"].buffer);
        } else {
          return null;
        }
      } catch (e) {
        return null;
      }
    } else {
      exports["__growWasmMemory"]((size - oldSize) / wasmPageSize);
      return Module["buffer"] !== old ? Module["buffer"] : null;
    }
  };
  Module["asm"] = function(global, env, providedBuffer) {
    global = fixImports(global);
    env = fixImports(env);
    if (!env["table"]) {
      var TABLE_SIZE = Module["wasmTableSize"];
      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024;
      var MAX_TABLE_SIZE = Module["wasmMaxTableSize"];
      if (typeof WebAssembly === "object" && typeof WebAssembly.Table === "function") {
        if (MAX_TABLE_SIZE !== undefined) {
          env["table"] = new WebAssembly.Table({
            initial: TABLE_SIZE,
            maximum: MAX_TABLE_SIZE,
            element: "anyfunc",
          });
        } else {
          env["table"] = new WebAssembly.Table({ initial: TABLE_SIZE, element: "anyfunc" });
        }
      } else {
        env["table"] = new Array(TABLE_SIZE);
      }
      Module["wasmTable"] = env["table"];
    }
    if (!env["memoryBase"]) {
      env["memoryBase"] = Module["STATIC_BASE"];
    }
    if (!env["tableBase"]) {
      env["tableBase"] = 0;
    }
    var exports;
    var methods = method.split(",");
    for (var i = 0; i < methods.length; i++) {
      var curr = methods[i];
      Module["printErr"]("trying binaryen method: " + curr);
      if (curr === "native-wasm") {
        if ((exports = doNativeWasm(global, env, providedBuffer))) break;
      } else if (curr === "asmjs") {
        if ((exports = doJustAsm(global, env, providedBuffer))) break;
      } else if (
        curr === "interpret-asm2wasm" ||
        curr === "interpret-s-expr" ||
        curr === "interpret-binary"
      ) {
        if ((exports = doWasmPolyfill(global, env, providedBuffer, curr))) break;
      } else {
        throw "bad method: " + curr;
      }
    }
    if (!exports)
      throw "no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods";
    Module["printErr"]("binaryen method succeeded.");
    return exports;
  };
  var methodHandler = Module["asm"];
}
integrateWasmJS(Module);
var ASM_CONSTS = [];
STATIC_BASE = 1024;
STATICTOP = STATIC_BASE + 15040;
__ATINIT__.push();
memoryInitializer = Module["wasmJSMethod"].indexOf("asmjs") >= 0 ||
  Module["wasmJSMethod"].indexOf("interpret-asm2wasm") >= 0
  ? "/javascript/mr.mem.jpg"
  : null;
var STATIC_BUMP = 15040;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;
var tempDoublePtr = STATICTOP;
STATICTOP += 16;
Module["_i64Subtract"] = _i64Subtract;
Module["_i64Add"] = _i64Add;
Module["_memset"] = _memset;
Module["_pthread_mutex_lock"] = _pthread_mutex_lock;
function _pthread_cond_signal() {
  return 0;
}
function _abort() {
  Module["abort"]();
}
function _pthread_cond_destroy() {
  return 0;
}
function _pthread_mutex_destroy() {}
function _pthread_create() {
  return 11;
}
var GL = {
  counter: 1,
  lastError: 0,
  buffers: [],
  mappedBuffers: {},
  programs: [],
  framebuffers: [],
  renderbuffers: [],
  textures: [],
  uniforms: [],
  shaders: [],
  vaos: [],
  contexts: [],
  currentContext: null,
  offscreenCanvases: {},
  timerQueriesEXT: [],
  byteSizeByTypeRoot: 5120,
  byteSizeByType: [1, 1, 2, 2, 4, 4, 4, 2, 3, 4, 8],
  programInfos: {},
  stringCache: {},
  tempFixedLengthArray: [],
  packAlignment: 4,
  unpackAlignment: 4,
  init: function() {
    GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
    for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
      GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i + 1);
    }
    for (var i = 0; i < 32; i++) {
      GL.tempFixedLengthArray.push(new Array(i));
    }
  },
  recordError: function recordError(errorCode) {
    if (!GL.lastError) {
      GL.lastError = errorCode;
    }
  },
  getNewId: function(table) {
    var ret = GL.counter++;
    for (var i = table.length; i < ret; i++) {
      table[i] = null;
    }
    return ret;
  },
  MINI_TEMP_BUFFER_SIZE: 256,
  miniTempBuffer: null,
  miniTempBufferViews: [0],
  getSource: function(shader, count, string, length) {
    var source = "";
    for (var i = 0; i < count; ++i) {
      var frag;
      if (length) {
        var len = HEAP32[(length + i * 4) >> 2];
        if (len < 0) {
          frag = Pointer_stringify(HEAP32[(string + i * 4) >> 2]);
        } else {
          frag = Pointer_stringify(HEAP32[(string + i * 4) >> 2], len);
        }
      } else {
        frag = Pointer_stringify(HEAP32[(string + i * 4) >> 2]);
      }
      source += frag;
    }
    return source;
  },
  createContext: function(canvas, webGLContextAttributes) {
    if (
      typeof webGLContextAttributes["majorVersion"] === "undefined" &&
      typeof webGLContextAttributes["minorVersion"] === "undefined"
    ) {
      webGLContextAttributes["majorVersion"] = 1;
      webGLContextAttributes["minorVersion"] = 0;
    }
    var ctx;
    var errorInfo = "?";
    function onContextCreationError(event) {
      errorInfo = event.statusMessage || errorInfo;
    }
    try {
      canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
      try {
        if (
          webGLContextAttributes["majorVersion"] == 1 &&
          webGLContextAttributes["minorVersion"] == 0
        ) {
          ctx =
            canvas.getContext("webgl", webGLContextAttributes) ||
            canvas.getContext("experimental-webgl", webGLContextAttributes);
        } else if (
          webGLContextAttributes["majorVersion"] == 2 &&
          webGLContextAttributes["minorVersion"] == 0
        ) {
          ctx =
            canvas.getContext("webgl2", webGLContextAttributes) ||
            canvas.getContext("experimental-webgl2", webGLContextAttributes);
        } else {
          throw "Unsupported WebGL context version " + majorVersion + "." + minorVersion + "!";
        }
      } finally {
        canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
      }
      if (!ctx) throw ":(";
    } catch (e) {
      Module.print(
        "Could not create canvas: " + [errorInfo, e, JSON.stringify(webGLContextAttributes)]
      );
      return 0;
    }
    if (!ctx) return 0;
    return GL.registerContext(ctx, webGLContextAttributes);
  },
  registerContext: function(ctx, webGLContextAttributes) {
    var handle = GL.getNewId(GL.contexts);
    var context = {
      handle: handle,
      attributes: webGLContextAttributes,
      version: webGLContextAttributes["majorVersion"],
      GLctx: ctx,
    };
    if (ctx.canvas) ctx.canvas.GLctxObject = context;
    GL.contexts[handle] = context;
    if (
      typeof webGLContextAttributes["enableExtensionsByDefault"] === "undefined" ||
      webGLContextAttributes["enableExtensionsByDefault"]
    ) {
      GL.initExtensions(context);
    }
    return handle;
  },
  makeContextCurrent: function(contextHandle) {
    var context = GL.contexts[contextHandle];
    if (!context) return false;
    GLctx = Module.ctx = context.GLctx;
    GL.currentContext = context;
    return true;
  },
  getContext: function(contextHandle) {
    return GL.contexts[contextHandle];
  },
  deleteContext: function(contextHandle) {
    if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
    if (typeof JSEvents === "object")
      JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
    if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas)
      GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
    GL.contexts[contextHandle] = null;
  },
  initExtensions: function(context) {
    if (!context) context = GL.currentContext;
    if (context.initExtensionsDone) return;
    context.initExtensionsDone = true;
    var GLctx = context.GLctx;
    context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
    if (context.version < 2) {
      var instancedArraysExt = GLctx.getExtension("ANGLE_instanced_arrays");
      if (instancedArraysExt) {
        GLctx["vertexAttribDivisor"] = function(index, divisor) {
          instancedArraysExt["vertexAttribDivisorANGLE"](index, divisor);
        };
        GLctx["drawArraysInstanced"] = function(mode, first, count, primcount) {
          instancedArraysExt["drawArraysInstancedANGLE"](mode, first, count, primcount);
        };
        GLctx["drawElementsInstanced"] = function(mode, count, type, indices, primcount) {
          instancedArraysExt["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
        };
      }
      var vaoExt = GLctx.getExtension("OES_vertex_array_object");
      if (vaoExt) {
        GLctx["createVertexArray"] = function() {
          return vaoExt["createVertexArrayOES"]();
        };
        GLctx["deleteVertexArray"] = function(vao) {
          vaoExt["deleteVertexArrayOES"](vao);
        };
        GLctx["bindVertexArray"] = function(vao) {
          vaoExt["bindVertexArrayOES"](vao);
        };
        GLctx["isVertexArray"] = function(vao) {
          return vaoExt["isVertexArrayOES"](vao);
        };
      }
      var drawBuffersExt = GLctx.getExtension("WEBGL_draw_buffers");
      if (drawBuffersExt) {
        GLctx["drawBuffers"] = function(n, bufs) {
          drawBuffersExt["drawBuffersWEBGL"](n, bufs);
        };
      }
    }
    GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
    var automaticallyEnabledExtensions = [
      "OES_texture_float",
      "OES_texture_half_float",
      "OES_standard_derivatives",
      "OES_vertex_array_object",
      "WEBGL_compressed_texture_s3tc",
      "WEBGL_depth_texture",
      "OES_element_index_uint",
      "EXT_texture_filter_anisotropic",
      "ANGLE_instanced_arrays",
      "OES_texture_float_linear",
      "OES_texture_half_float_linear",
      "WEBGL_compressed_texture_atc",
      "WEBGL_compressed_texture_pvrtc",
      "EXT_color_buffer_half_float",
      "WEBGL_color_buffer_float",
      "EXT_frag_depth",
      "EXT_sRGB",
      "WEBGL_draw_buffers",
      "WEBGL_shared_resources",
      "EXT_shader_texture_lod",
      "EXT_color_buffer_float",
    ];
    var exts = GLctx.getSupportedExtensions();
    if (exts && exts.length > 0) {
      GLctx.getSupportedExtensions().forEach(function(ext) {
        if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
          GLctx.getExtension(ext);
        }
      });
    }
  },
  populateUniformTable: function(program) {
    var p = GL.programs[program];
    GL.programInfos[program] = {
      uniforms: {},
      maxUniformLength: 0,
      maxAttributeLength: -1,
      maxUniformBlockNameLength: -1,
    };
    var ptable = GL.programInfos[program];
    var utable = ptable.uniforms;
    var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
    for (var i = 0; i < numUniforms; ++i) {
      var u = GLctx.getActiveUniform(p, i);
      var name = u.name;
      ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);
      if (name.indexOf("]", name.length - 1) !== -1) {
        var ls = name.lastIndexOf("[");
        name = name.slice(0, ls);
      }
      var loc = GLctx.getUniformLocation(p, name);
      if (loc != null) {
        var id = GL.getNewId(GL.uniforms);
        utable[name] = [u.size, id];
        GL.uniforms[id] = loc;
        for (var j = 1; j < u.size; ++j) {
          var n = name + "[" + j + "]";
          loc = GLctx.getUniformLocation(p, n);
          id = GL.getNewId(GL.uniforms);
          GL.uniforms[id] = loc;
        }
      }
    }
  },
};
var PATH = {
  splitPath: function(filename) {
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    return splitPathRe.exec(filename).slice(1);
  },
  normalizeArray: function(parts, allowAboveRoot) {
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === ".") {
        parts.splice(i, 1);
      } else if (last === "..") {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift("..");
      }
    }
    return parts;
  },
  normalize: function(path) {
    var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
    path = PATH.normalizeArray(
      path.split("/").filter(function(p) {
        return !!p;
      }),
      !isAbsolute
    ).join("/");
    if (!path && !isAbsolute) {
      path = ".";
    }
    if (path && trailingSlash) {
      path += "/";
    }
    return (isAbsolute ? "/" : "") + path;
  },
  dirname: function(path) {
    var result = PATH.splitPath(path), root = result[0], dir = result[1];
    if (!root && !dir) {
      return ".";
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1);
    }
    return root + dir;
  },
  basename: function(path) {
    if (path === "/") return "/";
    var lastSlash = path.lastIndexOf("/");
    if (lastSlash === -1) return path;
    return path.substr(lastSlash + 1);
  },
  extname: function(path) {
    return PATH.splitPath(path)[3];
  },
  join: function() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return PATH.normalize(paths.join("/"));
  },
  join2: function(l, r) {
    return PATH.normalize(l + "/" + r);
  },
  resolve: function() {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = i >= 0 ? arguments[i] : FS.cwd();
      if (typeof path !== "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path) {
        return "";
      }
      resolvedPath = path + "/" + resolvedPath;
      resolvedAbsolute = path.charAt(0) === "/";
    }
    resolvedPath = PATH.normalizeArray(
      resolvedPath.split("/").filter(function(p) {
        return !!p;
      }),
      !resolvedAbsolute
    ).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  },
  relative: function(from, to) {
    from = PATH.resolve(from).substr(1);
    to = PATH.resolve(to).substr(1);
    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== "") break;
      }
      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== "") break;
      }
      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }
    var fromParts = trim(from.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  },
};
function _emscripten_set_main_loop_timing(mode, value) {
  Browser.mainLoop.timingMode = mode;
  Browser.mainLoop.timingValue = value;
  if (!Browser.mainLoop.func) {
    return 1;
  }
  if (mode == 0) {
    Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
      var timeUntilNextTick =
        Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
      setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
    };
    Browser.mainLoop.method = "timeout";
  } else if (mode == 1) {
    Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
      Browser.requestAnimationFrame(Browser.mainLoop.runner);
    };
    Browser.mainLoop.method = "rAF";
  } else if (mode == 2) {
    if (!window["setImmediate"]) {
      var setImmediates = [];
      var emscriptenMainLoopMessageId = "setimmediate";
      function Browser_setImmediate_messageHandler(event) {
        if (event.source === window && event.data === emscriptenMainLoopMessageId) {
          event.stopPropagation();
          setImmediates.shift()();
        }
      }
      window.addEventListener("message", Browser_setImmediate_messageHandler, true);
      window["setImmediate"] = function Browser_emulated_setImmediate(func) {
        setImmediates.push(func);
        if (ENVIRONMENT_IS_WORKER) {
          if (Module["setImmediates"] === undefined) Module["setImmediates"] = [];
          Module["setImmediates"].push(func);
          window.postMessage({ target: emscriptenMainLoopMessageId });
        } else window.postMessage(emscriptenMainLoopMessageId, "*");
      };
    }
    Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
      window["setImmediate"](Browser.mainLoop.runner);
    };
    Browser.mainLoop.method = "immediate";
  }
  return 0;
}
function _emscripten_get_now() {
  abort();
}
function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
  Module["noExitRuntime"] = true;
  assert(
    !Browser.mainLoop.func,
    "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters."
  );
  Browser.mainLoop.func = func;
  Browser.mainLoop.arg = arg;
  var browserIterationFunc;
  if (typeof arg !== "undefined") {
    browserIterationFunc = function() {
      Module["dynCall_vi"](func, arg);
    };
  } else {
    browserIterationFunc = function() {
      Module["dynCall_v"](func);
    };
  }
  var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  Browser.mainLoop.runner = function Browser_mainLoop_runner() {
    if (ABORT) return;
    if (Browser.mainLoop.queue.length > 0) {
      var start = Date.now();
      var blocker = Browser.mainLoop.queue.shift();
      blocker.func(blocker.arg);
      if (Browser.mainLoop.remainingBlockers) {
        var remaining = Browser.mainLoop.remainingBlockers;
        var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
        if (blocker.counted) {
          Browser.mainLoop.remainingBlockers = next;
        } else {
          next = next + 0.5;
          Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
        }
      }
      console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
      Browser.mainLoop.updateStatus();
      if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
      setTimeout(Browser.mainLoop.runner, 0);
      return;
    }
    if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
    Browser.mainLoop.currentFrameNumber = (Browser.mainLoop.currentFrameNumber + 1) | 0;
    if (
      Browser.mainLoop.timingMode == 1 &&
      Browser.mainLoop.timingValue > 1 &&
      Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0
    ) {
      Browser.mainLoop.scheduler();
      return;
    } else if (Browser.mainLoop.timingMode == 0) {
      Browser.mainLoop.tickStartTime = _emscripten_get_now();
    }
    if (Browser.mainLoop.method === "timeout" && Module.ctx) {
      Module.printErr(
        "Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!"
      );
      Browser.mainLoop.method = "";
    }
    Browser.mainLoop.runIter(browserIterationFunc);
    if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
    if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData)
      SDL.audio.queueNewAudioData();
    Browser.mainLoop.scheduler();
  };
  if (!noSetTiming) {
    if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps);
    else _emscripten_set_main_loop_timing(1, 1);
    Browser.mainLoop.scheduler();
  }
  if (simulateInfiniteLoop) {
    throw "SimulateInfiniteLoop";
  }
}
var Browser = {
  mainLoop: {
    scheduler: null,
    method: "",
    currentlyRunningMainloop: 0,
    func: null,
    arg: 0,
    timingMode: 0,
    timingValue: 0,
    currentFrameNumber: 0,
    queue: [],
    pause: function() {
      Browser.mainLoop.scheduler = null;
      Browser.mainLoop.currentlyRunningMainloop++;
    },
    resume: function() {
      Browser.mainLoop.currentlyRunningMainloop++;
      var timingMode = Browser.mainLoop.timingMode;
      var timingValue = Browser.mainLoop.timingValue;
      var func = Browser.mainLoop.func;
      Browser.mainLoop.func = null;
      _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
      _emscripten_set_main_loop_timing(timingMode, timingValue);
      Browser.mainLoop.scheduler();
    },
    updateStatus: function() {
      if (Module["setStatus"]) {
        var message = Module["statusMessage"] || "Please wait...";
        var remaining = Browser.mainLoop.remainingBlockers;
        var expected = Browser.mainLoop.expectedBlockers;
        if (remaining) {
          if (remaining < expected) {
            Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
          } else {
            Module["setStatus"](message);
          }
        } else {
          Module["setStatus"]("");
        }
      }
    },
    runIter: function(func) {
      if (ABORT) return;
      if (Module["preMainLoop"]) {
        var preRet = Module["preMainLoop"]();
        if (preRet === false) {
          return;
        }
      }
      try {
        func();
      } catch (e) {
        if (e instanceof ExitStatus) {
          return;
        } else {
          if (e && typeof e === "object" && e.stack)
            Module.printErr("exception thrown: " + [e, e.stack]);
          throw e;
        }
      }
      if (Module["postMainLoop"]) Module["postMainLoop"]();
    },
  },
  isFullscreen: false,
  pointerLock: false,
  moduleContextCreatedCallbacks: [],
  workers: [],
  init: function() {
    if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
    if (Browser.initted) return;
    Browser.initted = true;
    try {
      new Blob();
      Browser.hasBlobConstructor = true;
    } catch (e) {
      Browser.hasBlobConstructor = false;
      console.log("warning: no blob constructor, cannot create blobs with mimetypes");
    }
    Browser.BlobBuilder = typeof MozBlobBuilder != "undefined"
      ? MozBlobBuilder
      : typeof WebKitBlobBuilder != "undefined"
          ? WebKitBlobBuilder
          : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
    Browser.URLObject = typeof window != "undefined"
      ? window.URL ? window.URL : window.webkitURL
      : undefined;
    if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
      console.log(
        "warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available."
      );
      Module.noImageDecoding = true;
    }
    var imagePlugin = {};
    imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
      return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
    };
    imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
      var b = null;
      if (Browser.hasBlobConstructor) {
        try {
          b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          if (b.size !== byteArray.length) {
            b = new Blob([new Uint8Array(byteArray).buffer], { type: Browser.getMimetype(name) });
          }
        } catch (e) {
          Runtime.warnOnce(
            "Blob constructor present but fails: " + e + "; falling back to blob builder"
          );
        }
      }
      if (!b) {
        var bb = new Browser.BlobBuilder();
        bb.append(new Uint8Array(byteArray).buffer);
        b = bb.getBlob();
      }
      var url = Browser.URLObject.createObjectURL(b);
      var img = new Image();
      img.onload = function img_onload() {
        assert(img.complete, "Image " + name + " could not be decoded");
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        Module["preloadedImages"][name] = canvas;
        Browser.URLObject.revokeObjectURL(url);
        if (onload) onload(byteArray);
      };
      img.onerror = function img_onerror(event) {
        console.log("Image " + url + " could not be decoded");
        if (onerror) onerror();
      };
      img.src = url;
    };
    Module["preloadPlugins"].push(imagePlugin);
    var audioPlugin = {};
    audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
      return !Module.noAudioDecoding && name.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 };
    };
    audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
      var done = false;
      function finish(audio) {
        if (done) return;
        done = true;
        Module["preloadedAudios"][name] = audio;
        if (onload) onload(byteArray);
      }
      function fail() {
        if (done) return;
        done = true;
        Module["preloadedAudios"][name] = new Audio();
        if (onerror) onerror();
      }
      if (Browser.hasBlobConstructor) {
        try {
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
        } catch (e) {
          return fail();
        }
        var url = Browser.URLObject.createObjectURL(b);
        var audio = new Audio();
        audio.addEventListener(
          "canplaythrough",
          function() {
            finish(audio);
          },
          false
        );
        audio.onerror = function audio_onerror(event) {
          if (done) return;
          console.log(
            "warning: browser could not fully decode audio " +
              name +
              ", trying slower base64 approach"
          );
          function encode64(data) {
            var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var PAD = "=";
            var ret = "";
            var leftchar = 0;
            var leftbits = 0;
            for (var i = 0; i < data.length; i++) {
              leftchar = (leftchar << 8) | data[i];
              leftbits += 8;
              while (leftbits >= 6) {
                var curr = (leftchar >> (leftbits - 6)) & 63;
                leftbits -= 6;
                ret += BASE[curr];
              }
            }
            if (leftbits == 2) {
              ret += BASE[(leftchar & 3) << 4];
              ret += PAD + PAD;
            } else if (leftbits == 4) {
              ret += BASE[(leftchar & 15) << 2];
              ret += PAD;
            }
            return ret;
          }
          audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
          finish(audio);
        };
        audio.src = url;
        Browser.safeSetTimeout(function() {
          finish(audio);
        }, 1e4);
      } else {
        return fail();
      }
    };
    Module["preloadPlugins"].push(audioPlugin);
    function pointerLockChange() {
      Browser.pointerLock =
        document["pointerLockElement"] === Module["canvas"] ||
        document["mozPointerLockElement"] === Module["canvas"] ||
        document["webkitPointerLockElement"] === Module["canvas"] ||
        document["msPointerLockElement"] === Module["canvas"];
    }
    var canvas = Module["canvas"];
    if (canvas) {
      canvas.requestPointerLock =
        canvas["requestPointerLock"] ||
        canvas["mozRequestPointerLock"] ||
        canvas["webkitRequestPointerLock"] ||
        canvas["msRequestPointerLock"] ||
        function() {};
      canvas.exitPointerLock =
        document["exitPointerLock"] ||
        document["mozExitPointerLock"] ||
        document["webkitExitPointerLock"] ||
        document["msExitPointerLock"] ||
        function() {};
      canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
      document.addEventListener("pointerlockchange", pointerLockChange, false);
      document.addEventListener("mozpointerlockchange", pointerLockChange, false);
      document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
      document.addEventListener("mspointerlockchange", pointerLockChange, false);
      if (Module["elementPointerLock"]) {
        canvas.addEventListener(
          "click",
          function(ev) {
            if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
              Module["canvas"].requestPointerLock();
              ev.preventDefault();
            }
          },
          false
        );
      }
    }
  },
  createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
    if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
    var ctx;
    var contextHandle;
    if (useWebGL) {
      var contextAttributes = { antialias: false, alpha: false };
      if (webGLContextAttributes) {
        for (var attribute in webGLContextAttributes) {
          contextAttributes[attribute] = webGLContextAttributes[attribute];
        }
      }
      contextHandle = GL.createContext(canvas, contextAttributes);
      if (contextHandle) {
        ctx = GL.getContext(contextHandle).GLctx;
      }
    } else {
      ctx = canvas.getContext("2d");
    }
    if (!ctx) return null;
    if (setInModule) {
      if (!useWebGL)
        assert(
          typeof GLctx === "undefined",
          "cannot set in module if GLctx is used, but we are a non-GL context that would replace it"
        );
      Module.ctx = ctx;
      if (useWebGL) GL.makeContextCurrent(contextHandle);
      Module.useWebGL = useWebGL;
      Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
        callback();
      });
      Browser.init();
    }
    return ctx;
  },
  destroyContext: function(canvas, useWebGL, setInModule) {},
  fullscreenHandlersInstalled: false,
  lockPointer: undefined,
  resizeCanvas: undefined,
  requestFullscreen: function(lockPointer, resizeCanvas, vrDevice) {
    Browser.lockPointer = lockPointer;
    Browser.resizeCanvas = resizeCanvas;
    Browser.vrDevice = vrDevice;
    if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
    if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
    if (typeof Browser.vrDevice === "undefined") Browser.vrDevice = null;
    var canvas = Module["canvas"];
    function fullscreenChange() {
      Browser.isFullscreen = false;
      var canvasContainer = canvas.parentNode;
      if (
        (document["fullscreenElement"] ||
          document["mozFullScreenElement"] ||
          document["msFullscreenElement"] ||
          document["webkitFullscreenElement"] ||
          document["webkitCurrentFullScreenElement"]) === canvasContainer
      ) {
        canvas.exitFullscreen =
          document["exitFullscreen"] ||
          document["cancelFullScreen"] ||
          document["mozCancelFullScreen"] ||
          document["msExitFullscreen"] ||
          document["webkitCancelFullScreen"] ||
          function() {};
        canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
        if (Browser.lockPointer) canvas.requestPointerLock();
        Browser.isFullscreen = true;
        if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
      } else {
        canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
        canvasContainer.parentNode.removeChild(canvasContainer);
        if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
      }
      if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullscreen);
      if (Module["onFullscreen"]) Module["onFullscreen"](Browser.isFullscreen);
      Browser.updateCanvasDimensions(canvas);
    }
    if (!Browser.fullscreenHandlersInstalled) {
      Browser.fullscreenHandlersInstalled = true;
      document.addEventListener("fullscreenchange", fullscreenChange, false);
      document.addEventListener("mozfullscreenchange", fullscreenChange, false);
      document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
      document.addEventListener("MSFullscreenChange", fullscreenChange, false);
    }
    var canvasContainer = document.createElement("div");
    canvas.parentNode.insertBefore(canvasContainer, canvas);
    canvasContainer.appendChild(canvas);
    canvasContainer.requestFullscreen =
      canvasContainer["requestFullscreen"] ||
      canvasContainer["mozRequestFullScreen"] ||
      canvasContainer["msRequestFullscreen"] ||
      (canvasContainer["webkitRequestFullscreen"]
        ? function() {
            canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]);
          }
        : null) ||
      (canvasContainer["webkitRequestFullScreen"]
        ? function() {
            canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
          }
        : null);
    if (vrDevice) {
      canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
    } else {
      canvasContainer.requestFullscreen();
    }
  },
  requestFullScreen: function(lockPointer, resizeCanvas, vrDevice) {
    Module.printErr(
      "Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead."
    );
    Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
      return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
    };
    return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
  },
  nextRAF: 0,
  fakeRequestAnimationFrame: function(func) {
    var now = Date.now();
    if (Browser.nextRAF === 0) {
      Browser.nextRAF = now + 1e3 / 60;
    } else {
      while (now + 2 >= Browser.nextRAF) {
        Browser.nextRAF += 1e3 / 60;
      }
    }
    var delay = Math.max(Browser.nextRAF - now, 0);
    setTimeout(func, delay);
  },
  requestAnimationFrame: function requestAnimationFrame(func) {
    if (typeof window === "undefined") {
      Browser.fakeRequestAnimationFrame(func);
    } else {
      if (!window.requestAnimationFrame) {
        window.requestAnimationFrame =
          window["requestAnimationFrame"] ||
          window["mozRequestAnimationFrame"] ||
          window["webkitRequestAnimationFrame"] ||
          window["msRequestAnimationFrame"] ||
          window["oRequestAnimationFrame"] ||
          Browser.fakeRequestAnimationFrame;
      }
      window.requestAnimationFrame(func);
    }
  },
  safeCallback: function(func) {
    return function() {
      if (!ABORT) return func.apply(null, arguments);
    };
  },
  allowAsyncCallbacks: true,
  queuedAsyncCallbacks: [],
  pauseAsyncCallbacks: function() {
    Browser.allowAsyncCallbacks = false;
  },
  resumeAsyncCallbacks: function() {
    Browser.allowAsyncCallbacks = true;
    if (Browser.queuedAsyncCallbacks.length > 0) {
      var callbacks = Browser.queuedAsyncCallbacks;
      Browser.queuedAsyncCallbacks = [];
      callbacks.forEach(function(func) {
        func();
      });
    }
  },
  safeRequestAnimationFrame: function(func) {
    return Browser.requestAnimationFrame(function() {
      if (ABORT) return;
      if (Browser.allowAsyncCallbacks) {
        func();
      } else {
        Browser.queuedAsyncCallbacks.push(func);
      }
    });
  },
  safeSetTimeout: function(func, timeout) {
    Module["noExitRuntime"] = true;
    return setTimeout(function() {
      if (ABORT) return;
      if (Browser.allowAsyncCallbacks) {
        func();
      } else {
        Browser.queuedAsyncCallbacks.push(func);
      }
    }, timeout);
  },
  safeSetInterval: function(func, timeout) {
    Module["noExitRuntime"] = true;
    return setInterval(function() {
      if (ABORT) return;
      if (Browser.allowAsyncCallbacks) {
        func();
      }
    }, timeout);
  },
  getMimetype: function(name) {
    return {
      jpg: "image/jpeg",
      jpeg: "image/jpeg",
      png: "image/png",
      bmp: "image/bmp",
      ogg: "audio/ogg",
      wav: "audio/wav",
      mp3: "audio/mpeg",
    }[name.substr(name.lastIndexOf(".") + 1)];
  },
  getUserMedia: function(func) {
    if (!window.getUserMedia) {
      window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
    }
    window.getUserMedia(func);
  },
  getMovementX: function(event) {
    return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
  },
  getMovementY: function(event) {
    return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
  },
  getMouseWheelDelta: function(event) {
    var delta = 0;
    switch (event.type) {
      case "DOMMouseScroll":
        delta = event.detail;
        break;
      case "mousewheel":
        delta = event.wheelDelta;
        break;
      case "wheel":
        delta = event["deltaY"];
        break;
      default:
        throw "unrecognized mouse wheel event: " + event.type;
    }
    return delta;
  },
  mouseX: 0,
  mouseY: 0,
  mouseMovementX: 0,
  mouseMovementY: 0,
  touches: {},
  lastTouches: {},
  calculateMouseEvent: function(event) {
    if (Browser.pointerLock) {
      if (event.type != "mousemove" && "mozMovementX" in event) {
        Browser.mouseMovementX = Browser.mouseMovementY = 0;
      } else {
        Browser.mouseMovementX = Browser.getMovementX(event);
        Browser.mouseMovementY = Browser.getMovementY(event);
      }
      if (typeof SDL != "undefined") {
        Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
        Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
      } else {
        Browser.mouseX += Browser.mouseMovementX;
        Browser.mouseY += Browser.mouseMovementY;
      }
    } else {
      var rect = Module["canvas"].getBoundingClientRect();
      var cw = Module["canvas"].width;
      var ch = Module["canvas"].height;
      var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
      var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
      if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
        var touch = event.touch;
        if (touch === undefined) {
          return;
        }
        var adjustedX = touch.pageX - (scrollX + rect.left);
        var adjustedY = touch.pageY - (scrollY + rect.top);
        adjustedX = adjustedX * (cw / rect.width);
        adjustedY = adjustedY * (ch / rect.height);
        var coords = { x: adjustedX, y: adjustedY };
        if (event.type === "touchstart") {
          Browser.lastTouches[touch.identifier] = coords;
          Browser.touches[touch.identifier] = coords;
        } else if (event.type === "touchend" || event.type === "touchmove") {
          var last = Browser.touches[touch.identifier];
          if (!last) last = coords;
          Browser.lastTouches[touch.identifier] = last;
          Browser.touches[touch.identifier] = coords;
        }
        return;
      }
      var x = event.pageX - (scrollX + rect.left);
      var y = event.pageY - (scrollY + rect.top);
      x = x * (cw / rect.width);
      y = y * (ch / rect.height);
      Browser.mouseMovementX = x - Browser.mouseX;
      Browser.mouseMovementY = y - Browser.mouseY;
      Browser.mouseX = x;
      Browser.mouseY = y;
    }
  },
  asyncLoad: function(url, onload, onerror, noRunDep) {
    var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
    Module["readAsync"](
      url,
      function(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep) removeRunDependency(dep);
      },
      function(event) {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      }
    );
    if (dep) addRunDependency(dep);
  },
  resizeListeners: [],
  updateResizeListeners: function() {
    var canvas = Module["canvas"];
    Browser.resizeListeners.forEach(function(listener) {
      listener(canvas.width, canvas.height);
    });
  },
  setCanvasSize: function(width, height, noUpdates) {
    var canvas = Module["canvas"];
    Browser.updateCanvasDimensions(canvas, width, height);
    if (!noUpdates) Browser.updateResizeListeners();
  },
  windowedWidth: 0,
  windowedHeight: 0,
  setFullscreenCanvasSize: function() {
    if (typeof SDL != "undefined") {
      var flags = HEAPU32[(SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2];
      flags = flags | 8388608;
      HEAP32[(SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2] = flags;
    }
    Browser.updateResizeListeners();
  },
  setWindowedCanvasSize: function() {
    if (typeof SDL != "undefined") {
      var flags = HEAPU32[(SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2];
      flags = flags & ~8388608;
      HEAP32[(SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2] = flags;
    }
    Browser.updateResizeListeners();
  },
  updateCanvasDimensions: function(canvas, wNative, hNative) {
    if (wNative && hNative) {
      canvas.widthNative = wNative;
      canvas.heightNative = hNative;
    } else {
      wNative = canvas.widthNative;
      hNative = canvas.heightNative;
    }
    var w = wNative;
    var h = hNative;
    if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
      if (w / h < Module["forcedAspectRatio"]) {
        w = Math.round(h * Module["forcedAspectRatio"]);
      } else {
        h = Math.round(w / Module["forcedAspectRatio"]);
      }
    }
    if (
      (document["fullscreenElement"] ||
        document["mozFullScreenElement"] ||
        document["msFullscreenElement"] ||
        document["webkitFullscreenElement"] ||
        document["webkitCurrentFullScreenElement"]) === canvas.parentNode &&
      typeof screen != "undefined"
    ) {
      var factor = Math.min(screen.width / w, screen.height / h);
      w = Math.round(w * factor);
      h = Math.round(h * factor);
    }
    if (Browser.resizeCanvas) {
      if (canvas.width != w) canvas.width = w;
      if (canvas.height != h) canvas.height = h;
      if (typeof canvas.style != "undefined") {
        canvas.style.removeProperty("width");
        canvas.style.removeProperty("height");
      }
    } else {
      if (canvas.width != wNative) canvas.width = wNative;
      if (canvas.height != hNative) canvas.height = hNative;
      if (typeof canvas.style != "undefined") {
        if (w != wNative || h != hNative) {
          canvas.style.setProperty("width", w + "px", "important");
          canvas.style.setProperty("height", h + "px", "important");
        } else {
          canvas.style.removeProperty("width");
          canvas.style.removeProperty("height");
        }
      }
    }
  },
  wgetRequests: {},
  nextWgetRequestHandle: 0,
  getNextWgetRequestHandle: function() {
    var handle = Browser.nextWgetRequestHandle;
    Browser.nextWgetRequestHandle++;
    return handle;
  },
};
function _malloc(bytes) {
  var ptr = Runtime.dynamicAlloc(bytes + 8);
  return (ptr + 8) & 4294967288;
}
Module["_malloc"] = _malloc;
function _free() {}
Module["_free"] = _free;
var _environ = STATICTOP;
STATICTOP += 16;
function ___buildEnvironment(env) {
  var MAX_ENV_VALUES = 64;
  var TOTAL_ENV_SIZE = 1024;
  var poolPtr;
  var envPtr;
  if (!___buildEnvironment.called) {
    ___buildEnvironment.called = true;
    ENV["USER"] = ENV["LOGNAME"] = "web_user";
    ENV["PATH"] = "/";
    ENV["PWD"] = "/";
    ENV["HOME"] = "/home/web_user";
    ENV["LANG"] = "C";
    ENV["_"] = Module["thisProgram"];
    poolPtr = allocate(TOTAL_ENV_SIZE, "i8", ALLOC_STATIC);
    envPtr = allocate(MAX_ENV_VALUES * 4, "i8*", ALLOC_STATIC);
    HEAP32[envPtr >> 2] = poolPtr;
    HEAP32[_environ >> 2] = envPtr;
  } else {
    envPtr = HEAP32[_environ >> 2];
    poolPtr = HEAP32[envPtr >> 2];
  }
  var strings = [];
  var totalSize = 0;
  for (var key in env) {
    if (typeof env[key] === "string") {
      var line = key + "=" + env[key];
      strings.push(line);
      totalSize += line.length;
    }
  }
  if (totalSize > TOTAL_ENV_SIZE) {
    throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
  }
  var ptrSize = 4;
  for (var i = 0; i < strings.length; i++) {
    var line = strings[i];
    writeAsciiToMemory(line, poolPtr);
    HEAP32[(envPtr + i * ptrSize) >> 2] = poolPtr;
    poolPtr += line.length + 1;
  }
  HEAP32[(envPtr + strings.length * ptrSize) >> 2] = 0;
}
var ENV = {};
function _getenv(name) {
  if (name === 0) return 0;
  name = Pointer_stringify(name);
  if (!ENV.hasOwnProperty(name)) return 0;
  if (_getenv.ret) _free(_getenv.ret);
  _getenv.ret = allocate(intArrayFromString(ENV[name]), "i8", ALLOC_NORMAL);
  return _getenv.ret;
}
var ERRNO_CODES = {
  EPERM: 1,
  ENOENT: 2,
  ESRCH: 3,
  EINTR: 4,
  EIO: 5,
  ENXIO: 6,
  E2BIG: 7,
  ENOEXEC: 8,
  EBADF: 9,
  ECHILD: 10,
  EAGAIN: 11,
  EWOULDBLOCK: 11,
  ENOMEM: 12,
  EACCES: 13,
  EFAULT: 14,
  ENOTBLK: 15,
  EBUSY: 16,
  EEXIST: 17,
  EXDEV: 18,
  ENODEV: 19,
  ENOTDIR: 20,
  EISDIR: 21,
  EINVAL: 22,
  ENFILE: 23,
  EMFILE: 24,
  ENOTTY: 25,
  ETXTBSY: 26,
  EFBIG: 27,
  ENOSPC: 28,
  ESPIPE: 29,
  EROFS: 30,
  EMLINK: 31,
  EPIPE: 32,
  EDOM: 33,
  ERANGE: 34,
  ENOMSG: 42,
  EIDRM: 43,
  ECHRNG: 44,
  EL2NSYNC: 45,
  EL3HLT: 46,
  EL3RST: 47,
  ELNRNG: 48,
  EUNATCH: 49,
  ENOCSI: 50,
  EL2HLT: 51,
  EDEADLK: 35,
  ENOLCK: 37,
  EBADE: 52,
  EBADR: 53,
  EXFULL: 54,
  ENOANO: 55,
  EBADRQC: 56,
  EBADSLT: 57,
  EDEADLOCK: 35,
  EBFONT: 59,
  ENOSTR: 60,
  ENODATA: 61,
  ETIME: 62,
  ENOSR: 63,
  ENONET: 64,
  ENOPKG: 65,
  EREMOTE: 66,
  ENOLINK: 67,
  EADV: 68,
  ESRMNT: 69,
  ECOMM: 70,
  EPROTO: 71,
  EMULTIHOP: 72,
  EDOTDOT: 73,
  EBADMSG: 74,
  ENOTUNIQ: 76,
  EBADFD: 77,
  EREMCHG: 78,
  ELIBACC: 79,
  ELIBBAD: 80,
  ELIBSCN: 81,
  ELIBMAX: 82,
  ELIBEXEC: 83,
  ENOSYS: 38,
  ENOTEMPTY: 39,
  ENAMETOOLONG: 36,
  ELOOP: 40,
  EOPNOTSUPP: 95,
  EPFNOSUPPORT: 96,
  ECONNRESET: 104,
  ENOBUFS: 105,
  EAFNOSUPPORT: 97,
  EPROTOTYPE: 91,
  ENOTSOCK: 88,
  ENOPROTOOPT: 92,
  ESHUTDOWN: 108,
  ECONNREFUSED: 111,
  EADDRINUSE: 98,
  ECONNABORTED: 103,
  ENETUNREACH: 101,
  ENETDOWN: 100,
  ETIMEDOUT: 110,
  EHOSTDOWN: 112,
  EHOSTUNREACH: 113,
  EINPROGRESS: 115,
  EALREADY: 114,
  EDESTADDRREQ: 89,
  EMSGSIZE: 90,
  EPROTONOSUPPORT: 93,
  ESOCKTNOSUPPORT: 94,
  EADDRNOTAVAIL: 99,
  ENETRESET: 102,
  EISCONN: 106,
  ENOTCONN: 107,
  ETOOMANYREFS: 109,
  EUSERS: 87,
  EDQUOT: 122,
  ESTALE: 116,
  ENOTSUP: 95,
  ENOMEDIUM: 123,
  EILSEQ: 84,
  EOVERFLOW: 75,
  ECANCELED: 125,
  ENOTRECOVERABLE: 131,
  EOWNERDEAD: 130,
  ESTRPIPE: 86,
};
function ___setErrNo(value) {
  if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
  return value;
}
function _putenv(string) {
  if (string === 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  }
  string = Pointer_stringify(string);
  var splitPoint = string.indexOf("=");
  if (string === "" || string.indexOf("=") === -1) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  }
  var name = string.slice(0, splitPoint);
  var value = string.slice(splitPoint + 1);
  if (!(name in ENV) || ENV[name] !== value) {
    ENV[name] = value;
    ___buildEnvironment(ENV);
  }
  return 0;
}
function _SDL_RWFromConstMem(mem, size) {
  var id = SDL.rwops.length;
  SDL.rwops.push({ bytes: mem, count: size });
  return id;
}
function _TTF_FontHeight(font) {
  var fontData = SDL.fonts[font];
  return fontData.size;
}
function _TTF_SizeText(font, text, w, h) {
  var fontData = SDL.fonts[font];
  if (w) {
    HEAP32[w >> 2] = SDL.estimateTextWidth(fontData, Pointer_stringify(text));
  }
  if (h) {
    HEAP32[h >> 2] = fontData.size;
  }
  return 0;
}
function _TTF_RenderText_Solid(font, text, color) {
  text = Pointer_stringify(text) || " ";
  var fontData = SDL.fonts[font];
  var w = SDL.estimateTextWidth(fontData, text);
  var h = fontData.size;
  var color = SDL.loadColorToCSSRGB(color);
  var fontString = h + "px " + fontData.name;
  var surf = SDL.makeSurface(w, h, 0, false, "text:" + text);
  var surfData = SDL.surfaces[surf];
  surfData.ctx.save();
  surfData.ctx.fillStyle = color;
  surfData.ctx.font = fontString;
  surfData.ctx.textBaseline = "top";
  surfData.ctx.fillText(text, 0, 0);
  surfData.ctx.restore();
  return surf;
}
function _Mix_HaltMusic() {
  var audio = SDL.music.audio;
  if (audio) {
    audio.src = audio.src;
    audio.currentPosition = 0;
    audio.pause();
  }
  SDL.music.audio = null;
  if (SDL.hookMusicFinished) {
    Module["dynCall_v"](SDL.hookMusicFinished);
  }
  return 0;
}
function _Mix_PlayMusic(id, loops) {
  if (SDL.music.audio) {
    if (!SDL.music.audio.paused) Module.printErr("Music is already playing. " + SDL.music.source);
    SDL.music.audio.pause();
  }
  var info = SDL.audios[id];
  var audio;
  if (info.webAudio) {
    audio = {};
    audio.resource = info;
    audio.paused = false;
    audio.currentPosition = 0;
    audio.play = function() {
      SDL.playWebAudio(this);
    };
    audio.pause = function() {
      SDL.pauseWebAudio(this);
    };
  } else if (info.audio) {
    audio = info.audio;
  }
  audio["onended"] = function() {
    if (SDL.music.audio == this) _Mix_HaltMusic();
  };
  audio.loop = loops != 0;
  audio.volume = SDL.music.volume;
  SDL.music.audio = audio;
  audio.play();
  return 0;
}
function _Mix_FreeChunk(id) {
  SDL.audios[id] = null;
}
function _Mix_LoadWAV_RW(rwopsID, freesrc) {
  var rwops = SDL.rwops[rwopsID];
  if (rwops === undefined) return 0;
  var filename = "";
  var audio;
  var webAudio;
  var bytes;
  if (rwops.filename !== undefined) {
    filename = PATH.resolve(rwops.filename);
    var raw = Module["preloadedAudios"][filename];
    if (!raw) {
      if (raw === null)
        Module.printErr("Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!");
      if (!Module.noAudioDecoding) Runtime.warnOnce("Cannot find preloaded audio " + filename);
      try {
        bytes = FS.readFile(filename);
      } catch (e) {
        Module.printErr("Couldn't find file for: " + filename);
        return 0;
      }
    }
    if (Module["freePreloadedMediaOnUse"]) {
      Module["preloadedAudios"][filename] = null;
    }
    audio = raw;
  } else if (rwops.bytes !== undefined) {
    if (SDL.webAudioAvailable())
      bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
    else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
  } else {
    return 0;
  }
  var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  var canPlayWithWebAudio =
    Module["SDL_canPlayWithWebAudio"] === undefined ||
    Module["SDL_canPlayWithWebAudio"](filename, arrayBuffer);
  if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
    audio = undefined;
    webAudio = {};
    webAudio.onDecodeComplete = [];
    function onDecodeComplete(data) {
      webAudio.decodedBuffer = data;
      webAudio.onDecodeComplete.forEach(function(e) {
        e();
      });
      webAudio.onDecodeComplete = undefined;
    }
    SDL.audioContext["decodeAudioData"](arrayBuffer, onDecodeComplete);
  } else if (audio === undefined && bytes) {
    var blob = new Blob([bytes], { type: rwops.mimetype });
    var url = URL.createObjectURL(blob);
    audio = new Audio();
    audio.src = url;
    audio.mozAudioChannelType = "content";
  }
  var id = SDL.audios.length;
  SDL.audios.push({ source: filename, audio: audio, webAudio: webAudio });
  return id;
}
function _Mix_PlayChannel(channel, id, loops) {
  var info = SDL.audios[id];
  if (!info) return -1;
  if (!info.audio && !info.webAudio) return -1;
  if (channel == -1) {
    for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
      if (!SDL.channels[i].audio) {
        channel = i;
        break;
      }
    }
    if (channel == -1) {
      Module.printErr("All " + SDL.numChannels + " channels in use!");
      return -1;
    }
  }
  var channelInfo = SDL.channels[channel];
  var audio;
  if (info.webAudio) {
    audio = {};
    audio.resource = info;
    audio.paused = false;
    audio.currentPosition = 0;
    audio.play = function() {
      SDL.playWebAudio(this);
    };
    audio.pause = function() {
      SDL.pauseWebAudio(this);
    };
  } else {
    audio = info.audio.cloneNode(true);
    audio.numChannels = info.audio.numChannels;
    audio.frequency = info.audio.frequency;
  }
  audio["onended"] = function SDL_audio_onended() {
    if (channelInfo.audio == this) {
      channelInfo.audio.paused = true;
      channelInfo.audio = null;
    }
    if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, "vi")(channel);
  };
  channelInfo.audio = audio;
  audio.loop = loops != 0;
  audio.volume = channelInfo.volume;
  audio.play();
  return channel;
}
function _SDL_PauseAudio(pauseOn) {
  if (!SDL.audio) {
    return;
  }
  if (pauseOn) {
    if (SDL.audio.timer !== undefined) {
      clearTimeout(SDL.audio.timer);
      SDL.audio.numAudioTimersPending = 0;
      SDL.audio.timer = undefined;
    }
  } else if (!SDL.audio.timer) {
    SDL.audio.numAudioTimersPending = 1;
    SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
  }
  SDL.audio.paused = pauseOn;
}
function _SDL_CloseAudio() {
  if (SDL.audio) {
    _SDL_PauseAudio(1);
    _free(SDL.audio.buffer);
    SDL.audio = null;
    SDL.allocateChannels(0);
  }
}
function _SDL_LockSurface(surf) {
  var surfData = SDL.surfaces[surf];
  surfData.locked++;
  if (surfData.locked > 1) return 0;
  if (!surfData.buffer) {
    surfData.buffer = _malloc(surfData.width * surfData.height * 4);
    HEAP32[(surf + 20) >> 2] = surfData.buffer;
  }
  HEAP32[(surf + 20) >> 2] = surfData.buffer;
  if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  if (SDL.defaults.discardOnLock) {
    if (!surfData.image) {
      surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
    }
    if (!SDL.defaults.opaqueFrontBuffer) return;
  } else {
    surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
  }
  if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
    var data = surfData.image.data;
    var num = data.length;
    for (var i = 0; i < num / 4; i++) {
      data[i * 4 + 3] = 255;
    }
  }
  if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
    if (surfData.isFlagSet(2097152)) {
      throw "CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set" +
        new Error().stack;
    } else {
      HEAPU8.set(surfData.image.data, surfData.buffer);
    }
  }
  return 0;
}
function _SDL_FreeRW(rwopsID) {
  SDL.rwops[rwopsID] = null;
  while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length - 1] === null) {
    SDL.rwops.pop();
  }
}
function _IMG_Load_RW(rwopsID, freeSrc) {
  try {
    function cleanup() {
      if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
    }
    function addCleanup(func) {
      var old = cleanup;
      cleanup = function added_cleanup() {
        old();
        func();
      };
    }
    var rwops = SDL.rwops[rwopsID];
    if (rwops === undefined) {
      return 0;
    }
    var filename = rwops.filename;
    if (filename === undefined) {
      Runtime.warnOnce(
        "Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins"
      );
      return 0;
    }
    if (!raw) {
      filename = PATH.resolve(filename);
      var raw = Module["preloadedImages"][filename];
      if (!raw) {
        if (raw === null)
          Module.printErr("Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!");
        Runtime.warnOnce("Cannot find preloaded image " + filename);
        Runtime.warnOnce(
          "Cannot find preloaded image " +
            filename +
            ". Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins"
        );
        return 0;
      } else if (Module["freePreloadedMediaOnUse"]) {
        Module["preloadedImages"][filename] = null;
      }
    }
    var surf = SDL.makeSurface(raw.width, raw.height, 0, false, "load:" + filename);
    var surfData = SDL.surfaces[surf];
    surfData.ctx.globalCompositeOperation = "copy";
    if (!raw.rawData) {
      surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
    } else {
      var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      if (raw.bpp == 4) {
        imageData.data.set(HEAPU8.subarray(raw.data, raw.data + raw.size));
      } else if (raw.bpp == 3) {
        var pixels = raw.size / 3;
        var data = imageData.data;
        var sourcePtr = raw.data;
        var destPtr = 0;
        for (var i = 0; i < pixels; i++) {
          data[destPtr++] = HEAPU8[sourcePtr++ >> 0];
          data[destPtr++] = HEAPU8[sourcePtr++ >> 0];
          data[destPtr++] = HEAPU8[sourcePtr++ >> 0];
          data[destPtr++] = 255;
        }
      } else if (raw.bpp == 1) {
        var pixels = raw.size;
        var data = imageData.data;
        var sourcePtr = raw.data;
        var destPtr = 0;
        for (var i = 0; i < pixels; i++) {
          var value = HEAPU8[sourcePtr++ >> 0];
          data[destPtr++] = value;
          data[destPtr++] = value;
          data[destPtr++] = value;
          data[destPtr++] = 255;
        }
      } else {
        Module.printErr("cannot handle bpp " + raw.bpp);
        return 0;
      }
      surfData.ctx.putImageData(imageData, 0, 0);
    }
    surfData.ctx.globalCompositeOperation = "source-over";
    _SDL_LockSurface(surf);
    surfData.locked--;
    if (SDL.GL) {
      surfData.canvas = surfData.ctx = null;
    }
    return surf;
  } finally {
    cleanup();
  }
}
function _SDL_RWFromFile(_name, mode) {
  var id = SDL.rwops.length;
  var name = Pointer_stringify(_name);
  SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
  return id;
}
function _IMG_Load(filename) {
  var rwops = _SDL_RWFromFile(filename);
  var result = _IMG_Load_RW(rwops, 1);
  return result;
}
function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
  return SDL.blitSurface(src, srcrect, dst, dstrect, true);
}
function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
  return SDL.blitSurface(src, srcrect, dst, dstrect, false);
}
function _SDL_GetTicks() {
  return (Date.now() - SDL.startTime) | 0;
}
var SDL = {
  defaults: {
    width: 320,
    height: 200,
    copyOnLock: true,
    discardOnLock: false,
    opaqueFrontBuffer: true,
  },
  version: null,
  surfaces: {},
  canvasPool: [],
  events: [],
  fonts: [null],
  audios: [null],
  rwops: [null],
  music: { audio: null, volume: 1 },
  mixerFrequency: 22050,
  mixerFormat: 32784,
  mixerNumChannels: 2,
  mixerChunkSize: 1024,
  channelMinimumNumber: 0,
  GL: false,
  glAttributes: {
    0: 3,
    1: 3,
    2: 2,
    3: 0,
    4: 0,
    5: 1,
    6: 16,
    7: 0,
    8: 0,
    9: 0,
    10: 0,
    11: 0,
    12: 0,
    13: 0,
    14: 0,
    15: 1,
    16: 0,
    17: 0,
    18: 0,
  },
  keyboardState: null,
  keyboardMap: {},
  canRequestFullscreen: false,
  isRequestingFullscreen: false,
  textInput: false,
  startTime: null,
  initFlags: 0,
  buttonState: 0,
  modState: 0,
  DOMButtons: [0, 0, 0],
  DOMEventToSDLEvent: {},
  TOUCH_DEFAULT_ID: 0,
  eventHandler: null,
  eventHandlerContext: null,
  eventHandlerTemp: 0,
  keyCodes: {
    16: 1249,
    17: 1248,
    18: 1250,
    20: 1081,
    33: 1099,
    34: 1102,
    35: 1101,
    36: 1098,
    37: 1104,
    38: 1106,
    39: 1103,
    40: 1105,
    44: 316,
    45: 1097,
    46: 127,
    91: 1251,
    93: 1125,
    96: 1122,
    97: 1113,
    98: 1114,
    99: 1115,
    100: 1116,
    101: 1117,
    102: 1118,
    103: 1119,
    104: 1120,
    105: 1121,
    106: 1109,
    107: 1111,
    109: 1110,
    110: 1123,
    111: 1108,
    112: 1082,
    113: 1083,
    114: 1084,
    115: 1085,
    116: 1086,
    117: 1087,
    118: 1088,
    119: 1089,
    120: 1090,
    121: 1091,
    122: 1092,
    123: 1093,
    124: 1128,
    125: 1129,
    126: 1130,
    127: 1131,
    128: 1132,
    129: 1133,
    130: 1134,
    131: 1135,
    132: 1136,
    133: 1137,
    134: 1138,
    135: 1139,
    144: 1107,
    160: 94,
    161: 33,
    162: 34,
    163: 35,
    164: 36,
    165: 37,
    166: 38,
    167: 95,
    168: 40,
    169: 41,
    170: 42,
    171: 43,
    172: 124,
    173: 45,
    174: 123,
    175: 125,
    176: 126,
    181: 127,
    182: 129,
    183: 128,
    188: 44,
    190: 46,
    191: 47,
    192: 96,
    219: 91,
    220: 92,
    221: 93,
    222: 39,
    224: 1251,
  },
  scanCodes: {
    8: 42,
    9: 43,
    13: 40,
    27: 41,
    32: 44,
    35: 204,
    39: 53,
    44: 54,
    46: 55,
    47: 56,
    48: 39,
    49: 30,
    50: 31,
    51: 32,
    52: 33,
    53: 34,
    54: 35,
    55: 36,
    56: 37,
    57: 38,
    58: 203,
    59: 51,
    61: 46,
    91: 47,
    92: 49,
    93: 48,
    96: 52,
    97: 4,
    98: 5,
    99: 6,
    100: 7,
    101: 8,
    102: 9,
    103: 10,
    104: 11,
    105: 12,
    106: 13,
    107: 14,
    108: 15,
    109: 16,
    110: 17,
    111: 18,
    112: 19,
    113: 20,
    114: 21,
    115: 22,
    116: 23,
    117: 24,
    118: 25,
    119: 26,
    120: 27,
    121: 28,
    122: 29,
    127: 76,
    305: 224,
    308: 226,
    316: 70,
  },
  loadRect: function(rect) {
    return {
      x: HEAP32[(rect + 0) >> 2],
      y: HEAP32[(rect + 4) >> 2],
      w: HEAP32[(rect + 8) >> 2],
      h: HEAP32[(rect + 12) >> 2],
    };
  },
  updateRect: function(rect, r) {
    HEAP32[rect >> 2] = r.x;
    HEAP32[(rect + 4) >> 2] = r.y;
    HEAP32[(rect + 8) >> 2] = r.w;
    HEAP32[(rect + 12) >> 2] = r.h;
  },
  intersectionOfRects: function(first, second) {
    var leftX = Math.max(first.x, second.x);
    var leftY = Math.max(first.y, second.y);
    var rightX = Math.min(first.x + first.w, second.x + second.w);
    var rightY = Math.min(first.y + first.h, second.y + second.h);
    return {
      x: leftX,
      y: leftY,
      w: Math.max(leftX, rightX) - leftX,
      h: Math.max(leftY, rightY) - leftY,
    };
  },
  checkPixelFormat: function(fmt) {},
  loadColorToCSSRGB: function(color) {
    var rgba = HEAP32[color >> 2];
    return "rgb(" + (rgba & 255) + "," + ((rgba >> 8) & 255) + "," + ((rgba >> 16) & 255) + ")";
  },
  loadColorToCSSRGBA: function(color) {
    var rgba = HEAP32[color >> 2];
    return (
      "rgba(" +
      (rgba & 255) +
      "," +
      ((rgba >> 8) & 255) +
      "," +
      ((rgba >> 16) & 255) +
      "," +
      ((rgba >> 24) & 255) / 255 +
      ")"
    );
  },
  translateColorToCSSRGBA: function(rgba) {
    return (
      "rgba(" +
      (rgba & 255) +
      "," +
      ((rgba >> 8) & 255) +
      "," +
      ((rgba >> 16) & 255) +
      "," +
      (rgba >>> 24) / 255 +
      ")"
    );
  },
  translateRGBAToCSSRGBA: function(r, g, b, a) {
    return "rgba(" + (r & 255) + "," + (g & 255) + "," + (b & 255) + "," + (a & 255) / 255 + ")";
  },
  translateRGBAToColor: function(r, g, b, a) {
    return r | (g << 8) | (b << 16) | (a << 24);
  },
  makeSurface: function(width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
    flags = flags || 0;
    var is_SDL_HWSURFACE = flags & 1;
    var is_SDL_HWPALETTE = flags & 2097152;
    var is_SDL_OPENGL = flags & 67108864;
    var surf = _malloc(60);
    var pixelFormat = _malloc(44);
    var bpp = is_SDL_HWPALETTE ? 1 : 4;
    var buffer = 0;
    if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
      buffer = _malloc(width * height * 4);
    }
    HEAP32[surf >> 2] = flags;
    HEAP32[(surf + 4) >> 2] = pixelFormat;
    HEAP32[(surf + 8) >> 2] = width;
    HEAP32[(surf + 12) >> 2] = height;
    HEAP32[(surf + 16) >> 2] = width * bpp;
    HEAP32[(surf + 20) >> 2] = buffer;
    HEAP32[(surf + 36) >> 2] = 0;
    HEAP32[(surf + 40) >> 2] = 0;
    HEAP32[(surf + 44) >> 2] = Module["canvas"].width;
    HEAP32[(surf + 48) >> 2] = Module["canvas"].height;
    HEAP32[(surf + 56) >> 2] = 1;
    HEAP32[pixelFormat >> 2] = -2042224636;
    HEAP32[(pixelFormat + 4) >> 2] = 0;
    HEAP8[(pixelFormat + 8) >> 0] = bpp * 8;
    HEAP8[(pixelFormat + 9) >> 0] = bpp;
    HEAP32[(pixelFormat + 12) >> 2] = rmask || 255;
    HEAP32[(pixelFormat + 16) >> 2] = gmask || 65280;
    HEAP32[(pixelFormat + 20) >> 2] = bmask || 16711680;
    HEAP32[(pixelFormat + 24) >> 2] = amask || 4278190080;
    SDL.GL = SDL.GL || is_SDL_OPENGL;
    var canvas;
    if (!usePageCanvas) {
      if (SDL.canvasPool.length > 0) {
        canvas = SDL.canvasPool.pop();
      } else {
        canvas = document.createElement("canvas");
      }
      canvas.width = width;
      canvas.height = height;
    } else {
      canvas = Module["canvas"];
    }
    var webGLContextAttributes = {
      antialias: SDL.glAttributes[13] != 0 && SDL.glAttributes[14] > 1,
      depth: SDL.glAttributes[6] > 0,
      stencil: SDL.glAttributes[7] > 0,
      alpha: SDL.glAttributes[3] > 0,
    };
    var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
    SDL.surfaces[surf] = {
      width: width,
      height: height,
      canvas: canvas,
      ctx: ctx,
      surf: surf,
      buffer: buffer,
      pixelFormat: pixelFormat,
      alpha: 255,
      flags: flags,
      locked: 0,
      usePageCanvas: usePageCanvas,
      source: source,
      isFlagSet: function(flag) {
        return flags & flag;
      },
    };
    return surf;
  },
  copyIndexedColorData: function(surfData, rX, rY, rW, rH) {
    if (!surfData.colors) {
      return;
    }
    var fullWidth = Module["canvas"].width;
    var fullHeight = Module["canvas"].height;
    var startX = rX || 0;
    var startY = rY || 0;
    var endX = (rW || fullWidth - startX) + startX;
    var endY = (rH || fullHeight - startY) + startY;
    var buffer = surfData.buffer;
    if (!surfData.image.data32) {
      surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
    }
    var data32 = surfData.image.data32;
    var colors32 = surfData.colors32;
    for (var y = startY; y < endY; ++y) {
      var base = y * fullWidth;
      for (var x = startX; x < endX; ++x) {
        data32[base + x] = colors32[HEAPU8[(buffer + base + x) >> 0]];
      }
    }
  },
  freeSurface: function(surf) {
    var refcountPointer = surf + 56;
    var refcount = HEAP32[refcountPointer >> 2];
    if (refcount > 1) {
      HEAP32[refcountPointer >> 2] = refcount - 1;
      return;
    }
    var info = SDL.surfaces[surf];
    if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
    if (info.buffer) _free(info.buffer);
    _free(info.pixelFormat);
    _free(surf);
    SDL.surfaces[surf] = null;
    if (surf === SDL.screen) {
      SDL.screen = null;
    }
  },
  blitSurface__deps: ["SDL_LockSurface"],
  blitSurface: function(src, srcrect, dst, dstrect, scale) {
    var srcData = SDL.surfaces[src];
    var dstData = SDL.surfaces[dst];
    var sr, dr;
    if (srcrect) {
      sr = SDL.loadRect(srcrect);
    } else {
      sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
    }
    if (dstrect) {
      dr = SDL.loadRect(dstrect);
    } else {
      dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
    }
    if (dstData.clipRect) {
      var widthScale = !scale || sr.w === 0 ? 1 : sr.w / dr.w;
      var heightScale = !scale || sr.h === 0 ? 1 : sr.h / dr.h;
      dr = SDL.intersectionOfRects(dstData.clipRect, dr);
      sr.w = dr.w * widthScale;
      sr.h = dr.h * heightScale;
      if (dstrect) {
        SDL.updateRect(dstrect, dr);
      }
    }
    var blitw, blith;
    if (scale) {
      blitw = dr.w;
      blith = dr.h;
    } else {
      blitw = sr.w;
      blith = sr.h;
    }
    if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
      return 0;
    }
    var oldAlpha = dstData.ctx.globalAlpha;
    dstData.ctx.globalAlpha = srcData.alpha / 255;
    dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
    dstData.ctx.globalAlpha = oldAlpha;
    if (dst != SDL.screen) {
      Runtime.warnOnce("WARNING: copying canvas data to memory for compatibility");
      _SDL_LockSurface(dst);
      dstData.locked--;
    }
    return 0;
  },
  downFingers: {},
  savedKeydown: null,
  receiveEvent: function(event) {
    function unpressAllPressedKeys() {
      for (var code in SDL.keyboardMap) {
        SDL.events.push({ type: "keyup", keyCode: SDL.keyboardMap[code] });
      }
    }
    switch (event.type) {
      case "touchstart":
      case "touchmove":
        {
          event.preventDefault();
          var touches = [];
          if (event.type === "touchstart") {
            for (var i = 0; i < event.touches.length; i++) {
              var touch = event.touches[i];
              if (SDL.downFingers[touch.identifier] != true) {
                SDL.downFingers[touch.identifier] = true;
                touches.push(touch);
              }
            }
          } else {
            touches = event.touches;
          }
          var firstTouch = touches[0];
          if (event.type == "touchstart") {
            SDL.DOMButtons[0] = 1;
          }
          var mouseEventType;
          switch (event.type) {
            case "touchstart":
              mouseEventType = "mousedown";
              break;
            case "touchmove":
              mouseEventType = "mousemove";
              break;
          }
          var mouseEvent = {
            type: mouseEventType,
            button: 0,
            pageX: firstTouch.clientX,
            pageY: firstTouch.clientY,
          };
          SDL.events.push(mouseEvent);
          for (var i = 0; i < touches.length; i++) {
            var touch = touches[i];
            SDL.events.push({ type: event.type, touch: touch });
          }
          break;
        }
      case "touchend":
        {
          event.preventDefault();
          for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            if (SDL.downFingers[touch.identifier] === true) {
              delete SDL.downFingers[touch.identifier];
            }
          }
          var mouseEvent = {
            type: "mouseup",
            button: 0,
            pageX: event.changedTouches[0].clientX,
            pageY: event.changedTouches[0].clientY,
          };
          SDL.DOMButtons[0] = 0;
          SDL.events.push(mouseEvent);
          for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            SDL.events.push({ type: "touchend", touch: touch });
          }
          break;
        }
      case "DOMMouseScroll":
      case "mousewheel":
      case "wheel":
        var delta = -Browser.getMouseWheelDelta(event);
        delta = delta == 0 ? 0 : delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1);
        var button = delta > 0 ? 3 : 4;
        SDL.events.push({
          type: "mousedown",
          button: button,
          pageX: event.pageX,
          pageY: event.pageY,
        });
        SDL.events.push({
          type: "mouseup",
          button: button,
          pageX: event.pageX,
          pageY: event.pageY,
        });
        SDL.events.push({ type: "wheel", deltaX: 0, deltaY: delta });
        event.preventDefault();
        break;
      case "mousemove":
        if (SDL.DOMButtons[0] === 1) {
          SDL.events.push({
            type: "touchmove",
            touch: { identifier: 0, deviceID: -1, pageX: event.pageX, pageY: event.pageY },
          });
        }
        if (Browser.pointerLock) {
          if ("mozMovementX" in event) {
            event["movementX"] = event["mozMovementX"];
            event["movementY"] = event["mozMovementY"];
          }
          if (event["movementX"] == 0 && event["movementY"] == 0) {
            event.preventDefault();
            return;
          }
        }
      case "keydown":
      case "keyup":
      case "keypress":
      case "mousedown":
      case "mouseup":
        if (
          event.type !== "keydown" ||
          (!SDL.unicode && !SDL.textInput) ||
          event.keyCode === 8 ||
          event.keyCode === 9
        ) {
          event.preventDefault();
        }
        if (event.type == "mousedown") {
          SDL.DOMButtons[event.button] = 1;
          SDL.events.push({
            type: "touchstart",
            touch: { identifier: 0, deviceID: -1, pageX: event.pageX, pageY: event.pageY },
          });
        } else if (event.type == "mouseup") {
          if (!SDL.DOMButtons[event.button]) {
            return;
          }
          SDL.events.push({
            type: "touchend",
            touch: { identifier: 0, deviceID: -1, pageX: event.pageX, pageY: event.pageY },
          });
          SDL.DOMButtons[event.button] = 0;
        }
        if (event.type === "keydown" || event.type === "mousedown") {
          SDL.canRequestFullscreen = true;
        } else if (event.type === "keyup" || event.type === "mouseup") {
          if (SDL.isRequestingFullscreen) {
            Module["requestFullscreen"](true, true);
            SDL.isRequestingFullscreen = false;
          }
          SDL.canRequestFullscreen = false;
        }
        if (event.type === "keypress" && SDL.savedKeydown) {
          SDL.savedKeydown.keypressCharCode = event.charCode;
          SDL.savedKeydown = null;
        } else if (event.type === "keydown") {
          SDL.savedKeydown = event;
        }
        if (event.type !== "keypress" || SDL.textInput) {
          SDL.events.push(event);
        }
        break;
      case "mouseout":
        for (var i = 0; i < 3; i++) {
          if (SDL.DOMButtons[i]) {
            SDL.events.push({ type: "mouseup", button: i, pageX: event.pageX, pageY: event.pageY });
            SDL.DOMButtons[i] = 0;
          }
        }
        event.preventDefault();
        break;
      case "focus":
        SDL.events.push(event);
        event.preventDefault();
        break;
      case "blur":
        SDL.events.push(event);
        unpressAllPressedKeys();
        event.preventDefault();
        break;
      case "visibilitychange":
        SDL.events.push({ type: "visibilitychange", visible: !document.hidden });
        unpressAllPressedKeys();
        event.preventDefault();
        break;
      case "unload":
        if (Browser.mainLoop.runner) {
          SDL.events.push(event);
          Browser.mainLoop.runner();
        }
        return;
      case "resize":
        SDL.events.push(event);
        if (event.preventDefault) {
          event.preventDefault();
        }
        break;
    }
    if (SDL.events.length >= 1e4) {
      Module.printErr("SDL event queue full, dropping events");
      SDL.events = SDL.events.slice(0, 1e4);
    }
    SDL.flushEventsToHandler();
    return;
  },
  lookupKeyCodeForEvent: function(event) {
    var code = event.keyCode;
    if (code >= 65 && code <= 90) {
      code += 32;
    } else {
      code = SDL.keyCodes[event.keyCode] || event.keyCode;
      if (
        event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT &&
        code >= (224 | (1 << 10)) &&
        code <= (227 | (1 << 10))
      ) {
        code += 4;
      }
    }
    return code;
  },
  handleEvent: function(event) {
    if (event.handled) return;
    event.handled = true;
    switch (event.type) {
      case "touchstart":
      case "touchend":
      case "touchmove":
        {
          Browser.calculateMouseEvent(event);
          break;
        }
      case "keydown":
      case "keyup":
        {
          var down = event.type === "keydown";
          var code = SDL.lookupKeyCodeForEvent(event);
          HEAP8[(SDL.keyboardState + code) >> 0] = down;
          SDL.modState =
            (HEAP8[(SDL.keyboardState + 1248) >> 0] ? 64 : 0) |
            (HEAP8[(SDL.keyboardState + 1249) >> 0] ? 1 : 0) |
            (HEAP8[(SDL.keyboardState + 1250) >> 0] ? 256 : 0) |
            (HEAP8[(SDL.keyboardState + 1252) >> 0] ? 128 : 0) |
            (HEAP8[(SDL.keyboardState + 1253) >> 0] ? 2 : 0) |
            (HEAP8[(SDL.keyboardState + 1254) >> 0] ? 512 : 0);
          if (down) {
            SDL.keyboardMap[code] = event.keyCode;
          } else {
            delete SDL.keyboardMap[code];
          }
          break;
        }
      case "mousedown":
      case "mouseup":
        if (event.type == "mousedown") {
          SDL.buttonState |= 1 << event.button;
        } else if (event.type == "mouseup") {
          SDL.buttonState &= ~(1 << event.button);
        }
      case "mousemove": {
        Browser.calculateMouseEvent(event);
        break;
      }
    }
  },
  flushEventsToHandler: function() {
    if (!SDL.eventHandler) return;
    while (SDL.pollEvent(SDL.eventHandlerTemp)) {
      Module["dynCall_iii"](SDL.eventHandler, SDL.eventHandlerContext, SDL.eventHandlerTemp);
    }
  },
  pollEvent: function(ptr) {
    if (SDL.initFlags & 512 && SDL.joystickEventState) {
      SDL.queryJoysticks();
    }
    if (ptr) {
      while (SDL.events.length > 0) {
        if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
      }
      return 0;
    } else {
      return SDL.events.length > 0;
    }
  },
  makeCEvent: function(event, ptr) {
    if (typeof event === "number") {
      _memcpy(ptr, event, 28);
      _free(event);
      return;
    }
    SDL.handleEvent(event);
    switch (event.type) {
      case "keydown":
      case "keyup":
        {
          var down = event.type === "keydown";
          var key = SDL.lookupKeyCodeForEvent(event);
          var scan;
          if (key >= 1024) {
            scan = key - 1024;
          } else {
            scan = SDL.scanCodes[key] || key;
          }
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP8[(ptr + 8) >> 0] = down ? 1 : 0;
          HEAP8[(ptr + 9) >> 0] = 0;
          HEAP32[(ptr + 12) >> 2] = scan;
          HEAP32[(ptr + 16) >> 2] = key;
          HEAP16[(ptr + 20) >> 1] = SDL.modState;
          HEAP32[(ptr + 24) >> 2] = event.keypressCharCode || key;
          break;
        }
      case "keypress":
        {
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          var cStr = intArrayFromString(String.fromCharCode(event.charCode));
          for (var i = 0; i < cStr.length; ++i) {
            HEAP8[(ptr + (8 + i)) >> 0] = cStr[i];
          }
          break;
        }
      case "mousedown":
      case "mouseup":
      case "mousemove":
        {
          if (event.type != "mousemove") {
            var down = event.type === "mousedown";
            HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(ptr + 4) >> 2] = 0;
            HEAP32[(ptr + 8) >> 2] = 0;
            HEAP32[(ptr + 12) >> 2] = 0;
            HEAP8[(ptr + 16) >> 0] = event.button + 1;
            HEAP8[(ptr + 17) >> 0] = down ? 1 : 0;
            HEAP32[(ptr + 20) >> 2] = Browser.mouseX;
            HEAP32[(ptr + 24) >> 2] = Browser.mouseY;
          } else {
            HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(ptr + 4) >> 2] = 0;
            HEAP32[(ptr + 8) >> 2] = 0;
            HEAP32[(ptr + 12) >> 2] = 0;
            HEAP32[(ptr + 16) >> 2] = SDL.buttonState;
            HEAP32[(ptr + 20) >> 2] = Browser.mouseX;
            HEAP32[(ptr + 24) >> 2] = Browser.mouseY;
            HEAP32[(ptr + 28) >> 2] = Browser.mouseMovementX;
            HEAP32[(ptr + 32) >> 2] = Browser.mouseMovementY;
          }
          break;
        }
      case "wheel":
        {
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP32[(ptr + 16) >> 2] = event.deltaX;
          HEAP32[(ptr + 20) >> 2] = event.deltaY;
          break;
        }
      case "touchstart":
      case "touchend":
      case "touchmove":
        {
          var touch = event.touch;
          if (!Browser.touches[touch.identifier]) break;
          var w = Module["canvas"].width;
          var h = Module["canvas"].height;
          var x = Browser.touches[touch.identifier].x / w;
          var y = Browser.touches[touch.identifier].y / h;
          var lx = Browser.lastTouches[touch.identifier].x / w;
          var ly = Browser.lastTouches[touch.identifier].y / h;
          var dx = x - lx;
          var dy = y - ly;
          if (touch["deviceID"] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
          if (dx === 0 && dy === 0 && event.type === "touchmove") return false;
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP32[(ptr + 4) >> 2] = _SDL_GetTicks();
          (tempI64 = [
            touch.deviceID >>> 0,
            ((tempDouble = touch.deviceID), +Math_abs(tempDouble) >= +1
              ? tempDouble > +0
                  ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0
                  : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0
              : 0),
          ]), (HEAP32[(ptr + 8) >> 2] = tempI64[0]), (HEAP32[(ptr + 12) >> 2] = tempI64[1]);
          (tempI64 = [
            touch.identifier >>> 0,
            ((tempDouble = touch.identifier), +Math_abs(tempDouble) >= +1
              ? tempDouble > +0
                  ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0
                  : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0
              : 0),
          ]), (HEAP32[(ptr + 16) >> 2] = tempI64[0]), (HEAP32[(ptr + 20) >> 2] = tempI64[1]);
          HEAPF32[(ptr + 24) >> 2] = x;
          HEAPF32[(ptr + 28) >> 2] = y;
          HEAPF32[(ptr + 32) >> 2] = dx;
          HEAPF32[(ptr + 36) >> 2] = dy;
          if (touch.force !== undefined) {
            HEAPF32[(ptr + 40) >> 2] = touch.force;
          } else {
            HEAPF32[(ptr + 40) >> 2] = event.type == "touchend" ? 0 : 1;
          }
          break;
        }
      case "unload":
        {
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          break;
        }
      case "resize":
        {
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP32[(ptr + 4) >> 2] = event.w;
          HEAP32[(ptr + 8) >> 2] = event.h;
          break;
        }
      case "joystick_button_up":
      case "joystick_button_down":
        {
          var state = event.type === "joystick_button_up" ? 0 : 1;
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP8[(ptr + 4) >> 0] = event.index;
          HEAP8[(ptr + 5) >> 0] = event.button;
          HEAP8[(ptr + 6) >> 0] = state;
          break;
        }
      case "joystick_axis_motion":
        {
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP8[(ptr + 4) >> 0] = event.index;
          HEAP8[(ptr + 5) >> 0] = event.axis;
          HEAP32[(ptr + 8) >> 2] = SDL.joystickAxisValueConversion(event.value);
          break;
        }
      case "focus":
        {
          var SDL_WINDOWEVENT_FOCUS_GAINED = 12;
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP32[(ptr + 4) >> 2] = 0;
          HEAP8[(ptr + 8) >> 0] = SDL_WINDOWEVENT_FOCUS_GAINED;
          break;
        }
      case "blur":
        {
          var SDL_WINDOWEVENT_FOCUS_LOST = 13;
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP32[(ptr + 4) >> 2] = 0;
          HEAP8[(ptr + 8) >> 0] = SDL_WINDOWEVENT_FOCUS_LOST;
          break;
        }
      case "visibilitychange":
        {
          var SDL_WINDOWEVENT_SHOWN = 1;
          var SDL_WINDOWEVENT_HIDDEN = 2;
          var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
          HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
          HEAP32[(ptr + 4) >> 2] = 0;
          HEAP8[(ptr + 8) >> 0] = visibilityEventID;
          break;
        }
      default:
        throw "Unhandled SDL event: " + event.type;
    }
  },
  estimateTextWidth: function(fontData, text) {
    var h = fontData.size;
    var fontString = h + "px " + fontData.name;
    var tempCtx = SDL.ttfContext;
    tempCtx.save();
    tempCtx.font = fontString;
    var ret = tempCtx.measureText(text).width | 0;
    tempCtx.restore();
    return ret;
  },
  allocateChannels: function(num) {
    if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
    SDL.numChannels = num;
    SDL.channels = [];
    for (var i = 0; i < num; i++) {
      SDL.channels[i] = { audio: null, volume: 1 };
    }
  },
  setGetVolume: function(info, volume) {
    if (!info) return 0;
    var ret = info.volume * 128;
    if (volume != -1) {
      info.volume = Math.min(Math.max(volume, 0), 128) / 128;
      if (info.audio) {
        try {
          info.audio.volume = info.volume;
          if (info.audio.webAudioGainNode)
            info.audio.webAudioGainNode["gain"]["value"] = info.volume;
        } catch (e) {
          Module.printErr("setGetVolume failed to set audio volume: " + e);
        }
      }
    }
    return ret;
  },
  setPannerPosition: function(info, x, y, z) {
    if (!info) return;
    if (info.audio) {
      if (info.audio.webAudioPannerNode) {
        info.audio.webAudioPannerNode["setPosition"](x, y, z);
      }
    }
  },
  playWebAudio: function(audio) {
    if (!audio) return;
    if (audio.webAudioNode) return;
    if (!SDL.webAudioAvailable()) return;
    try {
      var webAudio = audio.resource.webAudio;
      audio.paused = false;
      if (!webAudio.decodedBuffer) {
        if (webAudio.onDecodeComplete === undefined)
          abort("Cannot play back audio object that was not loaded");
        webAudio.onDecodeComplete.push(function() {
          if (!audio.paused) SDL.playWebAudio(audio);
        });
        return;
      }
      audio.webAudioNode = SDL.audioContext["createBufferSource"]();
      audio.webAudioNode["buffer"] = webAudio.decodedBuffer;
      audio.webAudioNode["loop"] = audio.loop;
      audio.webAudioNode["onended"] = function() {
        audio["onended"]();
      };
      audio.webAudioPannerNode = SDL.audioContext["createPanner"]();
      audio.webAudioPannerNode["setPosition"](0, 0, -0.5);
      audio.webAudioPannerNode["panningModel"] = "equalpower";
      audio.webAudioGainNode = SDL.audioContext["createGain"]();
      audio.webAudioGainNode["gain"]["value"] = audio.volume;
      audio.webAudioNode["connect"](audio.webAudioPannerNode);
      audio.webAudioPannerNode["connect"](audio.webAudioGainNode);
      audio.webAudioGainNode["connect"](SDL.audioContext["destination"]);
      audio.webAudioNode["start"](0, audio.currentPosition);
      audio.startTime = SDL.audioContext["currentTime"] - audio.currentPosition;
    } catch (e) {
      Module.printErr("playWebAudio failed: " + e);
    }
  },
  pauseWebAudio: function(audio) {
    if (!audio) return;
    if (audio.webAudioNode) {
      try {
        audio.currentPosition =
          (SDL.audioContext["currentTime"] - audio.startTime) %
          audio.resource.webAudio.decodedBuffer.duration;
        audio.webAudioNode["onended"] = undefined;
        audio.webAudioNode.stop(0);
        audio.webAudioNode = undefined;
      } catch (e) {
        Module.printErr("pauseWebAudio failed: " + e);
      }
    }
    audio.paused = true;
  },
  openAudioContext: function() {
    if (!SDL.audioContext) {
      if (typeof AudioContext !== "undefined") SDL.audioContext = new AudioContext();
      else if (typeof webkitAudioContext !== "undefined")
        SDL.audioContext = new webkitAudioContext();
    }
  },
  webAudioAvailable: function() {
    return !!SDL.audioContext;
  },
  fillWebAudioBufferFromHeap: function(heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
    var numChannels = SDL.audio.channels;
    for (var c = 0; c < numChannels; ++c) {
      var channelData = dstAudioBuffer["getChannelData"](c);
      if (channelData.length != sizeSamplesPerChannel) {
        throw "Web Audio output buffer length mismatch! Destination size: " +
          channelData.length +
          " samples vs expected " +
          sizeSamplesPerChannel +
          " samples!";
      }
      if (SDL.audio.format == 32784) {
        for (var j = 0; j < sizeSamplesPerChannel; ++j) {
          channelData[j] = HEAP16[(heapPtr + (j * numChannels + c) * 2) >> 1] / 32768;
        }
      } else if (SDL.audio.format == 8) {
        for (var j = 0; j < sizeSamplesPerChannel; ++j) {
          var v = HEAP8[(heapPtr + (j * numChannels + c)) >> 0];
          channelData[j] = (v >= 0 ? v - 128 : v + 128) / 128;
        }
      }
    }
  },
  debugSurface: function(surfData) {
    console.log(
      "dumping surface " + [surfData.surf, surfData.source, surfData.width, surfData.height]
    );
    var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
    var data = image.data;
    var num = Math.min(surfData.width, surfData.height);
    for (var i = 0; i < num; i++) {
      console.log(
        "   diagonal " +
          i +
          ":" +
          [
            data[i * surfData.width * 4 + i * 4 + 0],
            data[i * surfData.width * 4 + i * 4 + 1],
            data[i * surfData.width * 4 + i * 4 + 2],
            data[i * surfData.width * 4 + i * 4 + 3],
          ]
      );
    }
  },
  joystickEventState: 1,
  lastJoystickState: {},
  joystickNamePool: {},
  recordJoystickState: function(joystick, state) {
    var buttons = new Array(state.buttons.length);
    for (var i = 0; i < state.buttons.length; i++) {
      buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
    }
    SDL.lastJoystickState[joystick] = {
      buttons: buttons,
      axes: state.axes.slice(0),
      timestamp: state.timestamp,
      index: state.index,
      id: state.id,
    };
  },
  getJoystickButtonState: function(button) {
    if (typeof button === "object") {
      return button["pressed"];
    } else {
      return button > 0;
    }
  },
  queryJoysticks: function() {
    for (var joystick in SDL.lastJoystickState) {
      var state = SDL.getGamepad(joystick - 1);
      var prevState = SDL.lastJoystickState[joystick];
      if (typeof state === "undefined") return;
      if (typeof state.timestamp !== "number" || state.timestamp !== prevState.timestamp) {
        var i;
        for (i = 0; i < state.buttons.length; i++) {
          var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
          if (buttonState !== prevState.buttons[i]) {
            SDL.events.push({
              type: buttonState ? "joystick_button_down" : "joystick_button_up",
              joystick: joystick,
              index: joystick - 1,
              button: i,
            });
          }
        }
        for (i = 0; i < state.axes.length; i++) {
          if (state.axes[i] !== prevState.axes[i]) {
            SDL.events.push({
              type: "joystick_axis_motion",
              joystick: joystick,
              index: joystick - 1,
              axis: i,
              value: state.axes[i],
            });
          }
        }
        SDL.recordJoystickState(joystick, state);
      }
    }
  },
  joystickAxisValueConversion: function(value) {
    value = Math.min(1, Math.max(value, -1));
    return Math.ceil((value + 1) * 32767.5 - 32768);
  },
  getGamepads: function() {
    var fcn =
      navigator.getGamepads ||
      navigator.webkitGamepads ||
      navigator.mozGamepads ||
      navigator.gamepads ||
      navigator.webkitGetGamepads;
    if (fcn !== undefined) {
      return fcn.apply(navigator);
    } else {
      return [];
    }
  },
  getGamepad: function(deviceIndex) {
    var gamepads = SDL.getGamepads();
    if (gamepads.length > deviceIndex && deviceIndex >= 0) {
      return gamepads[deviceIndex];
    }
    return null;
  },
};
function _SDL_SetVideoMode(width, height, depth, flags) {
  [
    "touchstart",
    "touchend",
    "touchmove",
    "mousedown",
    "mouseup",
    "mousemove",
    "DOMMouseScroll",
    "mousewheel",
    "wheel",
    "mouseout",
  ].forEach(function(event) {
    Module["canvas"].addEventListener(event, SDL.receiveEvent, true);
  });
  var canvas = Module["canvas"];
  if (width == 0 && height == 0) {
    width = canvas.width;
    height = canvas.height;
  }
  if (!SDL.addedResizeListener) {
    SDL.addedResizeListener = true;
    Browser.resizeListeners.push(function(w, h) {
      if (!SDL.settingVideoMode) {
        SDL.receiveEvent({ type: "resize", w: w, h: h });
      }
    });
  }
  if (width !== canvas.width || height !== canvas.height) {
    SDL.settingVideoMode = true;
    Browser.setCanvasSize(width, height);
    SDL.settingVideoMode = false;
  }
  if (SDL.screen) {
    SDL.freeSurface(SDL.screen);
    assert(!SDL.screen);
  }
  if (SDL.GL) flags = flags | 67108864;
  SDL.screen = SDL.makeSurface(width, height, flags, true, "screen");
  return SDL.screen;
}
function ___lock() {}
function ___unlock() {}
function _SDL_UnlockSurface(surf) {
  assert(!SDL.GL);
  var surfData = SDL.surfaces[surf];
  if (!surfData.locked || --surfData.locked > 0) {
    return;
  }
  if (surfData.isFlagSet(2097152)) {
    SDL.copyIndexedColorData(surfData);
  } else if (!surfData.colors) {
    var data = surfData.image.data;
    var buffer = surfData.buffer;
    assert(buffer % 4 == 0, "Invalid buffer offset: " + buffer);
    var src = buffer >> 2;
    var dst = 0;
    var isScreen = surf == SDL.screen;
    var num;
    if (typeof CanvasPixelArray !== "undefined" && data instanceof CanvasPixelArray) {
      num = data.length;
      while (dst < num) {
        var val = HEAP32[src];
        data[dst] = val & 255;
        data[dst + 1] = (val >> 8) & 255;
        data[dst + 2] = (val >> 16) & 255;
        data[dst + 3] = isScreen ? 255 : (val >> 24) & 255;
        src++;
        dst += 4;
      }
    } else {
      var data32 = new Uint32Array(data.buffer);
      if (isScreen && SDL.defaults.opaqueFrontBuffer) {
        num = data32.length;
        data32.set(HEAP32.subarray(src, src + num));
        var data8 = new Uint8Array(data.buffer);
        var i = 3;
        var j = i + 4 * num;
        if (num % 8 == 0) {
          while (i < j) {
            data8[i] = 255;
            i = (i + 4) | 0;
            data8[i] = 255;
            i = (i + 4) | 0;
            data8[i] = 255;
            i = (i + 4) | 0;
            data8[i] = 255;
            i = (i + 4) | 0;
            data8[i] = 255;
            i = (i + 4) | 0;
            data8[i] = 255;
            i = (i + 4) | 0;
            data8[i] = 255;
            i = (i + 4) | 0;
            data8[i] = 255;
            i = (i + 4) | 0;
          }
        } else {
          while (i < j) {
            data8[i] = 255;
            i = (i + 4) | 0;
          }
        }
      } else {
        data32.set(HEAP32.subarray(src, src + data32.length));
      }
    }
  } else {
    var width = Module["canvas"].width;
    var height = Module["canvas"].height;
    var s = surfData.buffer;
    var data = surfData.image.data;
    var colors = surfData.colors;
    for (var y = 0; y < height; y++) {
      var base = y * width * 4;
      for (var x = 0; x < width; x++) {
        var val = HEAPU8[s++ >> 0] * 4;
        var start = base + x * 4;
        data[start] = colors[val];
        data[start + 1] = colors[val + 1];
        data[start + 2] = colors[val + 2];
      }
      s += width * 3;
    }
  }
  surfData.ctx.putImageData(surfData.image, 0, 0);
}
function _SDL_Flip(surf) {}
function _pthread_mutex_init() {}
function _SDL_CreateRGBSurface(flags, width, height, depth, rmask, gmask, bmask, amask) {
  return SDL.makeSurface(
    width,
    height,
    flags,
    false,
    "CreateRGBSurface",
    rmask,
    gmask,
    bmask,
    amask
  );
}
var SYSCALLS = {
  varargs: 0,
  get: function(varargs) {
    SYSCALLS.varargs += 4;
    var ret = HEAP32[(SYSCALLS.varargs - 4) >> 2];
    return ret;
  },
  getStr: function() {
    var ret = Pointer_stringify(SYSCALLS.get());
    return ret;
  },
  get64: function() {
    var low = SYSCALLS.get(), high = SYSCALLS.get();
    if (low >= 0) assert(high === 0);
    else assert(high === -1);
    return low;
  },
  getZero: function() {
    assert(SYSCALLS.get() === 0);
  },
};
function ___syscall54(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
Module["_bitshift64Lshr"] = _bitshift64Lshr;
function _pthread_cond_init() {
  return 0;
}
function _pthread_join() {}
function _emscripten_memcpy_big(dest, src, num) {
  HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
  return dest;
}
Module["_memcpy"] = _memcpy;
function ___syscall6(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD();
    FS.close(stream);
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
var cttz_i8 = allocate(
  [
    8,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    7,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
  ],
  "i8",
  ALLOC_STATIC
);
function _llvm_cttz_i32(x) {
  x = x | 0;
  var ret = 0;
  ret = HEAP8[(cttz_i8 + (x & 255)) >> 0] | 0;
  if ((ret | 0) < 8) return ret | 0;
  ret = HEAP8[(cttz_i8 + ((x >> 8) & 255)) >> 0] | 0;
  if ((ret | 0) < 8) return (ret + 8) | 0;
  ret = HEAP8[(cttz_i8 + ((x >> 16) & 255)) >> 0] | 0;
  if ((ret | 0) < 8) return (ret + 16) | 0;
  return ((HEAP8[(cttz_i8 + (x >>> 24)) >> 0] | 0) + 24) | 0;
}
Module["___udivmoddi4"] = ___udivmoddi4;
Module["___udivdi3"] = ___udivdi3;
Module["___muldsi3"] = ___muldsi3;
Module["___muldi3"] = ___muldi3;
Module["_sbrk"] = _sbrk;
Module["_bitshift64Shl"] = _bitshift64Shl;
function _SDL_Init(initFlags) {
  SDL.startTime = Date.now();
  SDL.initFlags = initFlags;
  if (!Module["doNotCaptureKeyboard"]) {
    var keyboardListeningElement = Module["keyboardListeningElement"] || document;
    keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
    keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
    keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
    window.addEventListener("focus", SDL.receiveEvent);
    window.addEventListener("blur", SDL.receiveEvent);
    document.addEventListener("visibilitychange", SDL.receiveEvent);
  }
  if (initFlags & 512) {
    addEventListener("gamepadconnected", function() {});
  }
  window.addEventListener("unload", SDL.receiveEvent);
  SDL.keyboardState = _malloc(65536);
  _memset(SDL.keyboardState, 0, 65536);
  SDL.DOMEventToSDLEvent["keydown"] = 768;
  SDL.DOMEventToSDLEvent["keyup"] = 769;
  SDL.DOMEventToSDLEvent["keypress"] = 771;
  SDL.DOMEventToSDLEvent["mousedown"] = 1025;
  SDL.DOMEventToSDLEvent["mouseup"] = 1026;
  SDL.DOMEventToSDLEvent["mousemove"] = 1024;
  SDL.DOMEventToSDLEvent["wheel"] = 1027;
  SDL.DOMEventToSDLEvent["touchstart"] = 1792;
  SDL.DOMEventToSDLEvent["touchend"] = 1793;
  SDL.DOMEventToSDLEvent["touchmove"] = 1794;
  SDL.DOMEventToSDLEvent["unload"] = 256;
  SDL.DOMEventToSDLEvent["resize"] = 28673;
  SDL.DOMEventToSDLEvent["visibilitychange"] = 512;
  SDL.DOMEventToSDLEvent["focus"] = 512;
  SDL.DOMEventToSDLEvent["blur"] = 512;
  SDL.DOMEventToSDLEvent["joystick_axis_motion"] = 1536;
  SDL.DOMEventToSDLEvent["joystick_button_down"] = 1539;
  SDL.DOMEventToSDLEvent["joystick_button_up"] = 1540;
  return 0;
}
Module["_memmove"] = _memmove;
Module["___uremdi3"] = ___uremdi3;
function _pthread_cond_wait() {
  return 0;
}
Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;
Module["_llvm_bswap_i32"] = _llvm_bswap_i32;
function _SDL_FreeSurface(surf) {
  if (surf) SDL.freeSurface(surf);
}
function ___syscall140(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(),
      offset_high = SYSCALLS.get(),
      offset_low = SYSCALLS.get(),
      result = SYSCALLS.get(),
      whence = SYSCALLS.get();
    var offset = offset_low;
    assert(offset_high === 0);
    FS.llseek(stream, offset, whence);
    HEAP32[result >> 2] = stream.position;
    if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
function ___syscall146(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
    var ret = 0;
    if (!___syscall146.buffer) {
      ___syscall146.buffers = [null, [], []];
      ___syscall146.printChar = function(stream, curr) {
        var buffer = ___syscall146.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? Module["print"] : Module["printErr"])(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      };
    }
    for (var i = 0; i < iovcnt; i++) {
      var ptr = HEAP32[(iov + i * 8) >> 2];
      var len = HEAP32[(iov + (i * 8 + 4)) >> 2];
      for (var j = 0; j < len; j++) {
        ___syscall146.printChar(stream, HEAPU8[ptr + j]);
      }
      ret += len;
    }
    return ret;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
var GLctx;
GL.init();
Module["requestFullScreen"] = function Module_requestFullScreen(
  lockPointer,
  resizeCanvas,
  vrDevice
) {
  Module.printErr(
    "Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."
  );
  Module["requestFullScreen"] = Module["requestFullscreen"];
  Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
};
Module["requestFullscreen"] = function Module_requestFullscreen(
  lockPointer,
  resizeCanvas,
  vrDevice
) {
  Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
  Browser.requestAnimationFrame(func);
};
Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
  Browser.setCanvasSize(width, height, noUpdates);
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
  Browser.mainLoop.pause();
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
  Browser.mainLoop.resume();
};
Module["getUserMedia"] = function Module_getUserMedia() {
  Browser.getUserMedia();
};
Module["createContext"] = function Module_createContext(
  canvas,
  useWebGL,
  setInModule,
  webGLContextAttributes
) {
  return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
};
if (ENVIRONMENT_IS_NODE) {
  _emscripten_get_now = function _emscripten_get_now_actual() {
    var t = process["hrtime"]();
    return t[0] * 1e3 + t[1] / 1e6;
  };
} else if (typeof dateNow !== "undefined") {
  _emscripten_get_now = dateNow;
} else if (
  typeof self === "object" &&
  self["performance"] &&
  typeof self["performance"]["now"] === "function"
) {
  _emscripten_get_now = function() {
    return self["performance"]["now"]();
  };
} else if (typeof performance === "object" && typeof performance["now"] === "function") {
  _emscripten_get_now = function() {
    return performance["now"]();
  };
} else {
  _emscripten_get_now = Date.now;
}
___buildEnvironment(ENV);
__ATEXIT__.push(function() {
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  var printChar = ___syscall146.printChar;
  if (!printChar) return;
  var buffers = ___syscall146.buffers;
  if (buffers[1].length) printChar(1, 10);
  if (buffers[2].length) printChar(2, 10);
});
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);
HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
staticSealed = true;
Module["wasmTableSize"] = 226;
Module["wasmMaxTableSize"] = 226;
function invoke_iiii(index, a1, a2, a3) {
  try {
    return Module["dynCall_iiii"](index, a1, a2, a3);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_viiiii(index, a1, a2, a3, a4, a5) {
  try {
    Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_vi(index, a1) {
  try {
    Module["dynCall_vi"](index, a1);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_vii(index, a1, a2) {
  try {
    Module["dynCall_vii"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
  try {
    return Module["dynCall_iiiiiii"](index, a1, a2, a3, a4, a5, a6);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_ii(index, a1) {
  try {
    return Module["dynCall_ii"](index, a1);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_viii(index, a1, a2, a3) {
  try {
    Module["dynCall_viii"](index, a1, a2, a3);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
  try {
    Module["dynCall_viiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_iiiii(index, a1, a2, a3, a4) {
  try {
    return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
  try {
    Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_iii(index, a1, a2) {
  try {
    return Module["dynCall_iii"](index, a1, a2);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
function invoke_viiii(index, a1, a2, a3, a4) {
  try {
    Module["dynCall_viiii"](index, a1, a2, a3, a4);
  } catch (e) {
    if (typeof e !== "number" && e !== "longjmp") throw e;
    Module["setThrew"](1, 0);
  }
}
Module.asmGlobalArg = {
  Math: Math,
  Int8Array: Int8Array,
  Int16Array: Int16Array,
  Int32Array: Int32Array,
  Uint8Array: Uint8Array,
  Uint16Array: Uint16Array,
  Uint32Array: Uint32Array,
  Float32Array: Float32Array,
  Float64Array: Float64Array,
  NaN: NaN,
  Infinity: Infinity,
};
Module.asmLibraryArg = {
  abort: abort,
  assert: assert,
  enlargeMemory: enlargeMemory,
  getTotalMemory: getTotalMemory,
  abortOnCannotGrowMemory: abortOnCannotGrowMemory,
  invoke_iiii: invoke_iiii,
  invoke_viiiii: invoke_viiiii,
  invoke_vi: invoke_vi,
  invoke_vii: invoke_vii,
  invoke_iiiiiii: invoke_iiiiiii,
  invoke_ii: invoke_ii,
  invoke_viii: invoke_viii,
  invoke_viiiiiiiii: invoke_viiiiiiiii,
  invoke_iiiii: invoke_iiiii,
  invoke_viiiiii: invoke_viiiiii,
  invoke_iii: invoke_iii,
  invoke_viiii: invoke_viiii,
  _pthread_cond_wait: _pthread_cond_wait,
  _putenv: _putenv,
  _pthread_join: _pthread_join,
  _SDL_SetVideoMode: _SDL_SetVideoMode,
  _IMG_Load: _IMG_Load,
  _abort: _abort,
  _TTF_FontHeight: _TTF_FontHeight,
  _SDL_CloseAudio: _SDL_CloseAudio,
  _SDL_PauseAudio: _SDL_PauseAudio,
  _SDL_GetTicks: _SDL_GetTicks,
  ___buildEnvironment: ___buildEnvironment,
  _pthread_cond_init: _pthread_cond_init,
  _SDL_LockSurface: _SDL_LockSurface,
  _llvm_cttz_i32: _llvm_cttz_i32,
  _emscripten_set_main_loop_timing: _emscripten_set_main_loop_timing,
  _SDL_Init: _SDL_Init,
  _SDL_FreeSurface: _SDL_FreeSurface,
  _Mix_PlayChannel: _Mix_PlayChannel,
  _TTF_RenderText_Solid: _TTF_RenderText_Solid,
  _Mix_LoadWAV_RW: _Mix_LoadWAV_RW,
  ___setErrNo: ___setErrNo,
  _Mix_PlayMusic: _Mix_PlayMusic,
  _emscripten_memcpy_big: _emscripten_memcpy_big,
  _pthread_cond_signal: _pthread_cond_signal,
  _pthread_mutex_destroy: _pthread_mutex_destroy,
  _SDL_UpperBlit: _SDL_UpperBlit,
  ___syscall54: ___syscall54,
  ___unlock: ___unlock,
  ___syscall140: ___syscall140,
  _pthread_create: _pthread_create,
  _emscripten_set_main_loop: _emscripten_set_main_loop,
  _emscripten_get_now: _emscripten_get_now,
  _SDL_CreateRGBSurface: _SDL_CreateRGBSurface,
  _SDL_RWFromConstMem: _SDL_RWFromConstMem,
  _TTF_SizeText: _TTF_SizeText,
  ___lock: ___lock,
  _SDL_UnlockSurface: _SDL_UnlockSurface,
  ___syscall6: ___syscall6,
  _Mix_FreeChunk: _Mix_FreeChunk,
  _Mix_HaltMusic: _Mix_HaltMusic,
  _getenv: _getenv,
  _SDL_Flip: _SDL_Flip,
  _SDL_FreeRW: _SDL_FreeRW,
  _SDL_UpperBlitScaled: _SDL_UpperBlitScaled,
  _pthread_mutex_init: _pthread_mutex_init,
  _pthread_cond_destroy: _pthread_cond_destroy,
  _IMG_Load_RW: _IMG_Load_RW,
  ___syscall146: ___syscall146,
  _SDL_RWFromFile: _SDL_RWFromFile,
  DYNAMICTOP_PTR: DYNAMICTOP_PTR,
  tempDoublePtr: tempDoublePtr,
  ABORT: ABORT,
  STACKTOP: STACKTOP,
  STACK_MAX: STACK_MAX,
  cttz_i8: cttz_i8,
};
var asm = Module["asm"](Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var stackSave = (Module["stackSave"] = asm["stackSave"]);
var getTempRet0 = (Module["getTempRet0"] = asm["getTempRet0"]);
var ___udivdi3 = (Module["___udivdi3"] = asm["___udivdi3"]);
var setThrew = (Module["setThrew"] = asm["setThrew"]);
var _bitshift64Lshr = (Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"]);
var _bitshift64Shl = (Module["_bitshift64Shl"] = asm["_bitshift64Shl"]);
var _fflush = (Module["_fflush"] = asm["_fflush"]);
var _memset = (Module["_memset"] = asm["_memset"]);
var _sbrk = (Module["_sbrk"] = asm["_sbrk"]);
var _memcpy = (Module["_memcpy"] = asm["_memcpy"]);
var ___errno_location = (Module["___errno_location"] = asm["___errno_location"]);
var ___muldi3 = (Module["___muldi3"] = asm["___muldi3"]);
var _WebpToSDL = (Module["_WebpToSDL"] = asm["_WebpToSDL"]);
var ___uremdi3 = (Module["___uremdi3"] = asm["___uremdi3"]);
var stackAlloc = (Module["stackAlloc"] = asm["stackAlloc"]);
var _i64Subtract = (Module["_i64Subtract"] = asm["_i64Subtract"]);
var ___udivmoddi4 = (Module["___udivmoddi4"] = asm["___udivmoddi4"]);
var setTempRet0 = (Module["setTempRet0"] = asm["setTempRet0"]);
var _i64Add = (Module["_i64Add"] = asm["_i64Add"]);
var _pthread_mutex_unlock = (Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"]);
var _emscripten_get_global_libc = (Module["_emscripten_get_global_libc"] =
  asm["_emscripten_get_global_libc"]);
var _llvm_bswap_i32 = (Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"]);
var ___muldsi3 = (Module["___muldsi3"] = asm["___muldsi3"]);
var _free = (Module["_free"] = asm["_free"]);
var runPostSets = (Module["runPostSets"] = asm["runPostSets"]);
var establishStackSpace = (Module["establishStackSpace"] = asm["establishStackSpace"]);
var _memmove = (Module["_memmove"] = asm["_memmove"]);
var stackRestore = (Module["stackRestore"] = asm["stackRestore"]);
var _malloc = (Module["_malloc"] = asm["_malloc"]);
var _pthread_mutex_lock = (Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"]);
var dynCall_iiii = (Module["dynCall_iiii"] = asm["dynCall_iiii"]);
var dynCall_viiiii = (Module["dynCall_viiiii"] = asm["dynCall_viiiii"]);
var dynCall_vi = (Module["dynCall_vi"] = asm["dynCall_vi"]);
var dynCall_vii = (Module["dynCall_vii"] = asm["dynCall_vii"]);
var dynCall_iiiiiii = (Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"]);
var dynCall_ii = (Module["dynCall_ii"] = asm["dynCall_ii"]);
var dynCall_viii = (Module["dynCall_viii"] = asm["dynCall_viii"]);
var dynCall_viiiiiiiii = (Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"]);
var dynCall_iiiii = (Module["dynCall_iiiii"] = asm["dynCall_iiiii"]);
var dynCall_viiiiii = (Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"]);
var dynCall_iii = (Module["dynCall_iii"] = asm["dynCall_iii"]);
var dynCall_viiii = (Module["dynCall_viiii"] = asm["dynCall_viiii"]);
Runtime.stackAlloc = Module["stackAlloc"];
Runtime.stackSave = Module["stackSave"];
Runtime.stackRestore = Module["stackRestore"];
Runtime.establishStackSpace = Module["establishStackSpace"];
Runtime.setTempRet0 = Module["setTempRet0"];
Runtime.getTempRet0 = Module["getTempRet0"];
Module["asm"] = asm;
if (memoryInitializer) {
  if (typeof Module["locateFile"] === "function") {
    memoryInitializer = Module["locateFile"](memoryInitializer);
  } else if (Module["memoryInitializerPrefixURL"]) {
    memoryInitializer = Module["memoryInitializerPrefixURL"] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module["readBinary"](memoryInitializer);
    HEAPU8.set(data, Runtime.GLOBAL_BASE);
  } else {
    addRunDependency("memory initializer");
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, Runtime.GLOBAL_BASE);
      if (Module["memoryInitializerRequest"]) delete Module["memoryInitializerRequest"].response;
      removeRunDependency("memory initializer");
    };
    function doBrowserLoad() {
      applyMemoryInitializer(_base64ToArrayBuffer(MEMBASE64));
    }
    if (Module["memoryInitializerRequest"]) {
      function useRequest() {
        var request = Module["memoryInitializerRequest"];
        if (request.status !== 200 && request.status !== 0) {
          console.warn(
            "a problem seems to have happened with Module.memoryInitializerRequest, status: " +
              request.status +
              ", retrying " +
              memoryInitializer
          );
          doBrowserLoad();
          return;
        }
        applyMemoryInitializer(request.response);
      }
      if (Module["memoryInitializerRequest"].response) {
        setTimeout(useRequest, 0);
      } else {
        Module["memoryInitializerRequest"].addEventListener("load", useRequest);
      }
    } else {
      doBrowserLoad();
    }
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  if (!Module["calledRun"]) run();
  if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
  args = args || [];
  ensureInitRuntime();
  var argc = args.length + 1;
  function pad() {
    for (var i = 0; i < 4 - 1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL)];
  pad();
  for (var i = 0; i < argc - 1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, "i32", ALLOC_NORMAL);
  try {
    var ret = Module["_main"](argc, argv, 0);
    exit(ret, true);
  } catch (e) {
    if (e instanceof ExitStatus) {
      return;
    } else if (e == "SimulateInfiniteLoop") {
      Module["noExitRuntime"] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === "object" && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr("exception thrown: " + toLog);
      Module["quit"](1, e);
    }
  } finally {
    calledMain = true;
  }
};
function run(args) {
  args = args || Module["arguments"];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    return;
  }
  preRun();
  if (runDependencies > 0) return;
  if (Module["calledRun"]) return;
  function doRun() {
    if (Module["calledRun"]) return;
    Module["calledRun"] = true;
    if (ABORT) return;
    ensureInitRuntime();
    preMain();
    if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
    if (Module["_main"] && shouldRunNow) Module["callMain"](args);
    postRun();
  }
  if (Module["setStatus"]) {
    Module["setStatus"]("Running...");
    setTimeout(function() {
      setTimeout(function() {
        Module["setStatus"]("");
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module["run"] = Module.run = run;
function exit(status, implicit) {
  if (implicit && Module["noExitRuntime"]) {
    return;
  }
  if (Module["noExitRuntime"]) {
  } else {
    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;
    exitRuntime();
    if (Module["onExit"]) Module["onExit"](status);
  }
  if (ENVIRONMENT_IS_NODE) {
    process["exit"](status);
  }
  Module["quit"](status, new ExitStatus(status));
}
Module["exit"] = Module.exit = exit;
var abortDecorators = [];
function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what);
  } else {
    what = "";
  }
  ABORT = true;
  EXITSTATUS = 1;
  var extra =
    "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
  var output = "abort(" + what + ") at " + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
  if (typeof Module["preInit"] == "function") Module["preInit"] = [Module["preInit"]];
  while (Module["preInit"].length > 0) {
    Module["preInit"].pop()();
  }
}
var shouldRunNow = false;
if (Module["noInitialRun"]) {
  shouldRunNow = false;
}
run();
